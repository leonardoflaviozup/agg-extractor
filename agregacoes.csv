conversa,nome_da_agregacao,descricao_da_agregacao,variavel_da_agregacao,codigo
alert_you_got_paid_spender,Total Spending and Income - Last 06 months,Agg Income and Spendind last 6 months. Save values for 3 months. Calculate top Vendors and Categories last 3 months.,rvars.agg.total_spending_and_income.totals,"""  const _ = require('lodash');\n  const moment = require('moment');\n\n  const restrict_spending_categories = [\n    10000,\n    20000,\n    30000,\n    40000,\n    50000,\n    60000,\n    70000,\n    80000,\n    90000,\n    10000014,\n    110000,\n    115000,\n    120000,\n    130000,\n  ];\n\n  const week_days_comparison_restrict_spending_categories = [\n    20000,\n    30000,\n    50000,\n    60000,\n    70000,\n    90000,\n    10000014,\n    110000,\n    115000,\n    120000,\n    130000,\n  ];\n\n  const start_1mo_closed = moment().subtract(1, 'month').startOf('month').valueOf();\n  const end_1mo_closed = moment().subtract(1, 'month').endOf('month').valueOf();\n  const start_3mo_closed = moment().subtract(3, 'month').startOf('month').valueOf();\n  const end_3mo_closed = moment().subtract(1, 'month').endOf('month').valueOf();\n  const start_6mo_closed = moment().subtract(6, 'month').startOf('month').valueOf();\n  const end_6mo_closed = moment().subtract(1, 'month').endOf('month').valueOf();\n  const start_this_month = moment().startOf('month').valueOf();\n  const oneMonthsAgo = moment().subtract(1, 'month').startOf('day').add(1, 'day').valueOf();\n  const threeMonthsAgo = moment().subtract(3, 'month').add(1, 'day').startOf('day').valueOf();\n  const sixMonthsAgo = moment().subtract(6, 'month').add(1, 'day').startOf('day').valueOf();\n\n  const start_year = moment('2021-01-01').valueOf();\n  const end_year = moment('2021-12-31').valueOf();\n  const this_moment = moment().utc().valueOf();\n  let spending = [];\n  let income = [];\n  let savings = [];\n\n  if (transactions && transactions.length) {\n    spending = transactions.filter(t => t.date.getTime() >= start_year &&\n      t.enabled && (t.budget_type === 'variable' || t.budget_type === 'fixed') && t.cashflow === true && t.cashflow_type === 'out');\n    income = transactions.filter(t => t.date.getTime() >= start_year && t.enabled && t.cashflow === true && t.cashflow_type === 'in');\n\n    savings = transactions.filter(t => t.date.getTime() >= start_year && t.enabled && t.cashflow === true && t.cashflow_type === 'nil' && [260000].includes(t.olivia_category_level1_id));\n  }\n\n  let date_last_income_transaction;\n  let date_last_spending_transaction;\n\n  let spending_12m = 0;\n  let spending_by_category_weekdays_12m = 0;\n  let spending_by_category_weekends_12m = 0;\n  let spending_06m = 0;\n  let spending_03m = 0;\n  let spending_01m = 0;\n  let spending_this_month = 0;\n  let savings_03m = 0;\n  let savings_unpaired_transactions_03m = 0;\n  let savings_investments_accounts_03m = 0;\n  let vendors_03m = null;\n  let vendors_12m = null;\n  let categories_01m = null;\n  let categories_03m = null;\n  let categories_12m = null;\n  let categories_this_month = null;\n  let variable_categories_this_month = null;\n  let transactions_03m = 0;\n  let spending_transactions_12m = 0;\n  let spending_transactions_credit_card_12m = 0;\n  let spending_list_credit_card_12m = [];\n  let income_transactions_12m = 0;\n  let food_and_drink_03m = 0;\n  let groceries_03m = 0;\n  let spending_01m_closed = 0;\n  let spending_03m_closed = 0;\n  let fixed_spending_01m = 0;\n  let variable_spending_01m = 0;\n  let fixed_spending_03m_closed = 0;\n  let variable_spending_03m_closed = 0;\n  let fixed_spending_06m_closed = 0;\n  let variable_spending_06m_closed = 0;\n  let fixed_spending_this_month = 0;\n  let variable_spending_this_month = 0;\n  let vendors_list_03m = [];\n  let vendors_list_12m = [];\n  let top_03_vendors_list_03m = [];\n  let top_03_vendors_list_12m = [];\n  let categories_list_this_month = [];\n  let top_03_categories_list_this_month = [];\n  let variable_categories_list_this_month = [];\n  let top_03_variable_categories_list_this_month = [];\n  let categories_list_01m = [];\n  let top_03_categories_list_01m = [];\n  let categories_list_03m = [];\n  let top_03_categories_list_03m = [];\n  let categories_list_12m = [];\n  let top_03_categories_list_12m = [];\n  let spending_credit_card_by_month = {};\n  let month_with_more_credit_card_transactions = '01';\n  let max_credit_card_transactions = 0;\n  let spending_by_category_weekend_list_12m = [];\n  let spending_by_category_weekdays_list_12m = [];\n  let top_03_spending_by_category_weekdays_12m = [];\n  let top_03_spending_by_category_weekend_12m = [];\n  let most_expensive_transaction_01m_closed = null;\n  let most_expensive_transaction_03m = null;\n\n  if (savings && savings.length) {\n    savings_unpaired_transactions_03m = -_.sumBy(savings.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && !t.paired_transaction_id), 'amount').toFixed(2);\n    savings_investments_accounts_03m = -_.sumBy(savings.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && [101, 103, 104, 105, 106].includes(t.account_type_id) && (t.account_type_id != 106 || !t.paired_transaction_id)), 'amount').toFixed(2);\n    savings_03m = savings_unpaired_transactions_03m - savings_investments_accounts_03m;\n  }\n\n  if (spending && spending.length) {\n    date_last_spending_transaction = moment(_.minBy(spending, 'date').date).format('YYYY-MM-DD');\n    spending_06m = -_.sumBy(spending.filter(t => t.date.getTime() >= sixMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    spending_12m = -_.sumBy(spending.filter(t => t.date.getTime() <= end_year), 'amount').toFixed(2);\n    spending_transactions_12m = _.size(spending.filter(t => t.date.getTime() <= end_year));\n\n    spending_by_category_weekdays_12m = _.groupBy(spending.filter(t => (moment(t.date).utc().day() != 0 && moment(t.date).utc().day() != 6) && t.date.getTime() <= end_year && week_days_comparison_restrict_spending_categories.includes(t.olivia_category_level1_id)), 'olivia_category_level1_id');;\n    if (spending_by_category_weekdays_12m) {\n      for (const category of Object.keys(spending_by_category_weekdays_12m)) {\n        const value = -spending_by_category_weekdays_12m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n        const transactions = _.size(spending_by_category_weekdays_12m[category]);\n        const percentual = parseFloat((value / spending_12m).toFixed(2));\n        spending_by_category_weekdays_list_12m.push({ category, value, transactions, percentual });\n      }\n    }\n    if (spending_by_category_weekdays_list_12m && spending_by_category_weekdays_list_12m.length) {\n      spending_by_category_weekdays_list_12m.sort((a, b) => b.value - a.value);\n      top_03_spending_by_category_weekdays_12m = spending_by_category_weekdays_list_12m.splice(0, 3);\n    }\n\n    spending_by_category_weekends_12m = _.groupBy(spending.filter(t => (moment(t.date).utc().day() == 0 || moment(t.date).utc().day() == 6) && t.date.getTime() <= end_year && week_days_comparison_restrict_spending_categories.includes(t.olivia_category_level1_id)), 'olivia_category_level1_id');;\n    if (spending_by_category_weekends_12m) {\n      for (const category of Object.keys(spending_by_category_weekends_12m)) {\n        const value = -spending_by_category_weekends_12m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n        const transactions = _.size(spending_by_category_weekends_12m[category]);\n        const percentual = parseFloat((value / spending_12m).toFixed(2));\n        spending_by_category_weekend_list_12m.push({ category, value, transactions, percentual });\n      }\n    }\n    if (spending_by_category_weekend_list_12m && spending_by_category_weekend_list_12m.length) {\n      spending_by_category_weekend_list_12m.sort((a, b) => b.value - a.value);\n      top_03_spending_by_category_weekend_12m = spending_by_category_weekend_list_12m.splice(0, 3);\n    }\n\n    categories_03m = _.groupBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment), 'olivia_category_level1_id');\n\n    spending_transactions_credit_card_12m = _.size(spending.filter(t => t.date.getTime() <= end_year && t.account_type_id == 200));\n\n    spending_list_credit_card_12m = spending.filter(t => t.date.getTime() <= end_year && t.account_type_id == 200);\n\n    for (const i in spending_list_credit_card_12m) {\n      const m = moment(spending_list_credit_card_12m[i].date).format('MM');\n      spending_credit_card_by_month[m] = (spending_credit_card_by_month[m] || 0) + 1;\n    }\n    for (const m of Object.keys(spending_credit_card_by_month)) {\n      month_with_more_credit_card_transactions = (spending_credit_card_by_month[m] >= (spending_credit_card_by_month[month_with_more_credit_card_transactions] || 0)) ? m : month_with_more_credit_card_transactions;\n      max_credit_card_transactions = (spending_credit_card_by_month[m] >= spending_credit_card_by_month[month_with_more_credit_card_transactions] || 0) ? spending_credit_card_by_month[m] : spending_credit_card_by_month[month_with_more_credit_card_transactions];\n    }\n\n    var spending_01m_closed_transactions = spending.filter(t => t.date.getTime() >= start_1mo_closed && t.date.getTime() <= end_1mo_closed);\n\n    if (spending_01m_closed_transactions && spending_01m_closed_transactions.length > 0) {\n      spending_01m_closed = -_.sumBy(spending_01m_closed_transactions, 'amount').toFixed(2);\n      most_expensive_transaction_01m_closed = spending_01m_closed_transactions.reduce((first, second) => (first.amount < second.amount) ? first : second);\n      most_expensive_transaction_01m_closed = _.pick(most_expensive_transaction_01m_closed, ['description', 'amount']);\n    }\n\n    var spending_03m_transactions = spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment);\n\n    if (spending_03m_transactions && spending_03m_transactions.length > 0) {\n      spending_03m = -_.sumBy(spending_03m_transactions, 'amount').toFixed(2);\n      most_expensive_transaction_03m = spending_03m_transactions.reduce((first, second) => (first.amount < second.amount) ? first : second);\n      most_expensive_transaction_03m = _.pick(most_expensive_transaction_03m, ['description', 'amount']);\n    }\n\n    vendors_03m = _.groupBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && restrict_spending_categories.includes(t.olivia_category_level1_id)), 'relevant_description');\n    vendors_12m = _.groupBy(spending.filter(t => t.date.getTime() <= end_year && restrict_spending_categories.includes(t.olivia_category_level1_id)), 'relevant_description');\n    categories_01m = _.groupBy(spending.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment), 'olivia_category_level1_id');\n    categories_03m = _.groupBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment), 'olivia_category_level1_id');\n    categories_12m = _.groupBy(spending.filter(t => t.date.getTime() <= end_year), 'olivia_category_level1_id');\n    categories_this_month = _.groupBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment), 'olivia_category_level1_id');\n    variable_categories_this_month = _.groupBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment && t.budget_type === 'variable'), 'olivia_category_level1_id');\n    transactions_03m = _.size(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment));\n    food_and_drink_03m = -_.sumBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && [60000].includes(t.olivia_category_level1_id)), 'amount').toFixed(2);\n    groceries_03m = -_.sumBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && [115000].includes(t.olivia_category_level1_id)), 'amount').toFixed(2);\n    spending_01m = -_.sumBy(spending.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    spending_this_month = -_.sumBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    spending_03m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_3mo_closed && t.date.getTime() <= end_3mo_closed), 'amount').toFixed(2);\n    fixed_spending_01m = -_.sumBy(spending.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment && t.budget_type === 'fixed'), 'amount').toFixed(2);\n    variable_spending_01m = -_.sumBy(spending.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment && t.budget_type === 'variable'), 'amount').toFixed(2);\n    fixed_spending_this_month = -_.sumBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment && t.budget_type === 'fixed'), 'amount').toFixed(2);\n    variable_spending_this_month = -_.sumBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment && t.budget_type === 'variable'), 'amount').toFixed(2);\n    fixed_spending_03m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_3mo_closed && t.date.getTime() <= end_3mo_closed && t.budget_type === 'fixed'), 'amount').toFixed(2);\n    variable_spending_03m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_3mo_closed && t.date.getTime() <= end_3mo_closed && t.budget_type === 'variable'), 'amount').toFixed(2);\n    fixed_spending_06m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_6mo_closed && t.date.getTime() <= end_6mo_closed && t.budget_type === 'fixed'), 'amount').toFixed(2);\n    variable_spending_06m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_6mo_closed && t.date.getTime() <= end_6mo_closed && t.budget_type === 'variable'), 'amount').toFixed(2);\n  }\n\n  if (vendors_03m) {\n    for (const vendor of Object.keys(vendors_03m)) {\n      const value = -vendors_03m[vendor].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(vendors_03m[vendor]);\n      vendors_list_03m.push({ vendor, value, transactions });\n    }\n  }\n\n  if (vendors_list_03m && vendors_list_03m.length) {\n    vendors_list_03m.sort((a, b) => b.transactions - a.transactions);\n    top_03_vendors_list_03m = vendors_list_03m.splice(0, 3);\n  }\n\n  if (vendors_12m) {\n    for (const vendor of Object.keys(vendors_12m)) {\n      const value = -vendors_12m[vendor].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(vendors_12m[vendor]);\n      vendors_list_12m.push({ vendor, value, transactions });\n    }\n  }\n\n  if (vendors_list_12m && vendors_list_12m.length) {\n    vendors_list_12m.sort((a, b) => b.transactions - a.transactions);\n    top_03_vendors_list_12m = vendors_list_12m.splice(0, 3);\n  }\n\n  if (categories_01m) {\n    for (const category of Object.keys(categories_01m)) {\n      const value = -categories_01m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(categories_01m[category]);\n      const percentual = parseFloat((value / spending_01m).toFixed(2));\n      categories_list_01m.push({ category, value, transactions, percentual });\n    }\n  }\n  if (categories_list_01m && categories_list_01m.length) {\n    categories_list_01m.sort((a, b) => b.value - a.value);\n    top_03_categories_list_01m = categories_list_01m.splice(0, 3);\n  }\n\n  if (categories_03m) {\n    for (const category of Object.keys(categories_03m)) {\n      const value = -categories_03m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(categories_03m[category]);\n      const percentual = parseFloat((value / spending_03m).toFixed(2));\n      categories_list_03m.push({ category, value, transactions, percentual });\n    }\n  }\n  if (categories_list_03m && categories_list_03m.length) {\n    categories_list_03m.sort((a, b) => b.value - a.value);\n    top_03_categories_list_03m = categories_list_03m.splice(0, 3);\n  }\n  if (categories_12m) {\n    for (const category of Object.keys(categories_12m)) {\n      const value = -categories_12m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(categories_12m[category]);\n      const percentual = parseFloat((value / spending_12m).toFixed(2));\n      categories_list_12m.push({ category, value, transactions, percentual });\n    }\n  }\n  if (categories_list_12m && categories_list_12m.length) {\n    categories_list_12m.sort((a, b) => b.value - a.value);\n    top_03_categories_list_12m = categories_list_12m.splice(0, 3);\n  }\n\n  if (categories_this_month) {\n    for (const category of Object.keys(categories_this_month)) {\n      const value = -categories_this_month[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(categories_this_month[category]);\n      const percentual = parseFloat((value / spending_this_month).toFixed(2));\n      categories_list_this_month.push({ category, value, transactions, percentual });\n    }\n  }\n  if (categories_list_this_month && categories_list_this_month.length) {\n    categories_list_this_month.sort((a, b) => b.value - a.value);\n    top_03_categories_list_this_month = categories_list_this_month.splice(0, 3);\n  }\n\n  if (variable_categories_this_month) {\n    for (const category of Object.keys(variable_categories_this_month)) {\n      const value = -variable_categories_this_month[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(variable_categories_this_month[category]);\n      const percentual = parseFloat((value / spending_this_month).toFixed(2));\n      variable_categories_list_this_month.push({ category, value, transactions, percentual });\n    }\n  }\n  if (variable_categories_list_this_month && variable_categories_list_this_month.length) {\n    variable_categories_list_this_month.sort((a, b) => b.value - a.value);\n    top_03_variable_categories_list_this_month = variable_categories_list_this_month.splice(0, 3);\n  }\n\n  let income_12m = 0;\n  let income_06m = 0;\n  let income_03m = 0;\n  let income_01m = 0;\n  let income_03m_closed = 0;\n  let income_this_month = 0;\n  let income_paycheck_this_month = 0;\n  let income_list_12m = null;\n  let income_by_month = {};\n  let month_with_more_deposits = '01'\n\n  if (income && income.length) {\n    date_last_income_transaction = moment(_.minBy(income, 'date').date).format('YYYY-MM-DD');\n    income_transactions_12m = _.size(income.filter(t => t.date.getTime() <= end_year));\n    income_list_12m = income.filter(t => t.date.getTime() <= end_year);\n    for (const i in income_list_12m) {\n      const m = moment(income_list_12m[i].date).format('MM');\n      income_by_month[m] = (income_by_month[m] || 0) + income_list_12m[i].amount;\n    }\n    for (const m of Object.keys(income_by_month)) {\n      month_with_more_deposits = (income_by_month[m] >= (income_by_month[month_with_more_deposits] || 0)) ? m : month_with_more_deposits;\n    }\n    income_12m = _.sumBy(income_list_12m, 'amount').toFixed(2);\n    income_06m = _.sumBy(income.filter(t => t.date.getTime() >= sixMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    income_03m = _.sumBy(income.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    income_01m = _.sumBy(income.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    income_03m_closed = _.sumBy(income.filter(t => t.date.getTime() >= start_3mo_closed && t.date.getTime() <= end_3mo_closed), 'amount').toFixed(2);\n    income_this_month = _.sumBy(income.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    income_paycheck_this_month = _.sumBy(income.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment && [150300].includes(t.olivia_category_id)), 'amount').toFixed(2);\n  }\n\n  let annual_savings_year = income_12m - spending_12m;\n  let annual_savings_2020 = income_12m - spending_12m;\n\n  return {\n    v: '3.3',\n    update_at: moment().format('llll'),\n    spending_06m,\n    spending_03m,\n    spending_transactions_12m,\n    spending_12m,\n    income_transactions_12m,\n    top_03_vendors_list_03m,\n    top_03_vendors_list_12m,\n    top_03_categories_list_01m,\n    top_03_categories_list_03m,\n    top_03_categories_list_12m,\n    top_03_categories_list_this_month,\n    top_03_variable_categories_list_this_month,\n    transactions_03m,\n    food_and_drink_03m,\n    groceries_03m,\n    spending_01m,\n    spending_01m_closed,\n    spending_03m_closed,\n    spending_this_month,\n    fixed_spending_01m,\n    variable_spending_01m,\n    fixed_spending_03m_closed,\n    variable_spending_03m_closed,\n    fixed_spending_06m_closed,\n    variable_spending_06m_closed,\n    fixed_spending_this_month,\n    variable_spending_this_month,\n    income_12m,\n    income_06m,\n    income_03m,\n    income_01m,\n    income_03m_closed,\n    income_this_month,\n    income_paycheck_this_month,\n    income_by_month,\n    most_expensive_transaction_01m_closed,\n    most_expensive_transaction_03m,\n    month_with_more_deposits,\n    annual_savings_year,\n    annual_savings_2020,\n    spending_transactions_credit_card_12m,\n    spending_credit_card_by_month,\n    month_with_more_credit_card_transactions,\n    max_credit_card_transactions,\n    top_03_spending_by_category_weekdays_12m,\n    top_03_spending_by_category_weekend_12m,\n    savings_unpaired_transactions_03m,\n    savings_investments_accounts_03m,\n    savings_03m,\n    date_last_spending_transaction,\n    date_last_income_transaction\n  }\n"""
alert_you_got_paid_spender,L1 Category Income 7 Days Sum Amount,undefined,rvars.agg.l1cat150000.amt7d,undefined
itau_deploy,Total Spending and Income - Last 06 months,Agg Income and Spendind last 6 months. Save values for 3 months. Calculate top Vendors and Categories last 3 months.,rvars.agg.total_spending_and_income.totals,"""  const _ = require('lodash');\n  const moment = require('moment');\n\n  const restrict_spending_categories = [\n    10000,\n    20000,\n    30000,\n    40000,\n    50000,\n    60000,\n    70000,\n    80000,\n    90000,\n    10000014,\n    110000,\n    115000,\n    120000,\n    130000,\n  ];\n\n  const week_days_comparison_restrict_spending_categories = [\n    20000,\n    30000,\n    50000,\n    60000,\n    70000,\n    90000,\n    10000014,\n    110000,\n    115000,\n    120000,\n    130000,\n  ];\n\n  const start_1mo_closed = moment().subtract(1, 'month').startOf('month').valueOf();\n  const end_1mo_closed = moment().subtract(1, 'month').endOf('month').valueOf();\n  const start_3mo_closed = moment().subtract(3, 'month').startOf('month').valueOf();\n  const end_3mo_closed = moment().subtract(1, 'month').endOf('month').valueOf();\n  const start_6mo_closed = moment().subtract(6, 'month').startOf('month').valueOf();\n  const end_6mo_closed = moment().subtract(1, 'month').endOf('month').valueOf();\n  const start_this_month = moment().startOf('month').valueOf();\n  const oneMonthsAgo = moment().subtract(1, 'month').startOf('day').add(1, 'day').valueOf();\n  const threeMonthsAgo = moment().subtract(3, 'month').add(1, 'day').startOf('day').valueOf();\n  const sixMonthsAgo = moment().subtract(6, 'month').add(1, 'day').startOf('day').valueOf();\n\n  const start_year = moment('2021-01-01').valueOf();\n  const end_year = moment('2021-12-31').valueOf();\n  const this_moment = moment().utc().valueOf();\n  let spending = [];\n  let income = [];\n  let savings = [];\n\n  if (transactions && transactions.length) {\n    spending = transactions.filter(t => t.date.getTime() >= start_year &&\n      t.enabled && (t.budget_type === 'variable' || t.budget_type === 'fixed') && t.cashflow === true && t.cashflow_type === 'out');\n    income = transactions.filter(t => t.date.getTime() >= start_year && t.enabled && t.cashflow === true && t.cashflow_type === 'in');\n\n    savings = transactions.filter(t => t.date.getTime() >= start_year && t.enabled && t.cashflow === true && t.cashflow_type === 'nil' && [260000].includes(t.olivia_category_level1_id));\n  }\n\n  let date_last_income_transaction;\n  let date_last_spending_transaction;\n\n  let spending_12m = 0;\n  let spending_by_category_weekdays_12m = 0;\n  let spending_by_category_weekends_12m = 0;\n  let spending_06m = 0;\n  let spending_03m = 0;\n  let spending_01m = 0;\n  let spending_this_month = 0;\n  let savings_03m = 0;\n  let savings_unpaired_transactions_03m = 0;\n  let savings_investments_accounts_03m = 0;\n  let vendors_03m = null;\n  let vendors_12m = null;\n  let categories_01m = null;\n  let categories_03m = null;\n  let categories_12m = null;\n  let categories_this_month = null;\n  let variable_categories_this_month = null;\n  let transactions_03m = 0;\n  let spending_transactions_12m = 0;\n  let spending_transactions_credit_card_12m = 0;\n  let spending_list_credit_card_12m = [];\n  let income_transactions_12m = 0;\n  let food_and_drink_03m = 0;\n  let groceries_03m = 0;\n  let spending_01m_closed = 0;\n  let spending_03m_closed = 0;\n  let fixed_spending_01m = 0;\n  let variable_spending_01m = 0;\n  let fixed_spending_03m_closed = 0;\n  let variable_spending_03m_closed = 0;\n  let fixed_spending_06m_closed = 0;\n  let variable_spending_06m_closed = 0;\n  let fixed_spending_this_month = 0;\n  let variable_spending_this_month = 0;\n  let vendors_list_03m = [];\n  let vendors_list_12m = [];\n  let top_03_vendors_list_03m = [];\n  let top_03_vendors_list_12m = [];\n  let categories_list_this_month = [];\n  let top_03_categories_list_this_month = [];\n  let variable_categories_list_this_month = [];\n  let top_03_variable_categories_list_this_month = [];\n  let categories_list_01m = [];\n  let top_03_categories_list_01m = [];\n  let categories_list_03m = [];\n  let top_03_categories_list_03m = [];\n  let categories_list_12m = [];\n  let top_03_categories_list_12m = [];\n  let spending_credit_card_by_month = {};\n  let month_with_more_credit_card_transactions = '01';\n  let max_credit_card_transactions = 0;\n  let spending_by_category_weekend_list_12m = [];\n  let spending_by_category_weekdays_list_12m = [];\n  let top_03_spending_by_category_weekdays_12m = [];\n  let top_03_spending_by_category_weekend_12m = [];\n  let most_expensive_transaction_01m_closed = null;\n  let most_expensive_transaction_03m = null;\n\n  if (savings && savings.length) {\n    savings_unpaired_transactions_03m = -_.sumBy(savings.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && !t.paired_transaction_id), 'amount').toFixed(2);\n    savings_investments_accounts_03m = -_.sumBy(savings.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && [101, 103, 104, 105, 106].includes(t.account_type_id) && (t.account_type_id != 106 || !t.paired_transaction_id)), 'amount').toFixed(2);\n    savings_03m = savings_unpaired_transactions_03m - savings_investments_accounts_03m;\n  }\n\n  if (spending && spending.length) {\n    date_last_spending_transaction = moment(_.minBy(spending, 'date').date).format('YYYY-MM-DD');\n    spending_06m = -_.sumBy(spending.filter(t => t.date.getTime() >= sixMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    spending_12m = -_.sumBy(spending.filter(t => t.date.getTime() <= end_year), 'amount').toFixed(2);\n    spending_transactions_12m = _.size(spending.filter(t => t.date.getTime() <= end_year));\n\n    spending_by_category_weekdays_12m = _.groupBy(spending.filter(t => (moment(t.date).utc().day() != 0 && moment(t.date).utc().day() != 6) && t.date.getTime() <= end_year && week_days_comparison_restrict_spending_categories.includes(t.olivia_category_level1_id)), 'olivia_category_level1_id');;\n    if (spending_by_category_weekdays_12m) {\n      for (const category of Object.keys(spending_by_category_weekdays_12m)) {\n        const value = -spending_by_category_weekdays_12m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n        const transactions = _.size(spending_by_category_weekdays_12m[category]);\n        const percentual = parseFloat((value / spending_12m).toFixed(2));\n        spending_by_category_weekdays_list_12m.push({ category, value, transactions, percentual });\n      }\n    }\n    if (spending_by_category_weekdays_list_12m && spending_by_category_weekdays_list_12m.length) {\n      spending_by_category_weekdays_list_12m.sort((a, b) => b.value - a.value);\n      top_03_spending_by_category_weekdays_12m = spending_by_category_weekdays_list_12m.splice(0, 3);\n    }\n\n    spending_by_category_weekends_12m = _.groupBy(spending.filter(t => (moment(t.date).utc().day() == 0 || moment(t.date).utc().day() == 6) && t.date.getTime() <= end_year && week_days_comparison_restrict_spending_categories.includes(t.olivia_category_level1_id)), 'olivia_category_level1_id');;\n    if (spending_by_category_weekends_12m) {\n      for (const category of Object.keys(spending_by_category_weekends_12m)) {\n        const value = -spending_by_category_weekends_12m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n        const transactions = _.size(spending_by_category_weekends_12m[category]);\n        const percentual = parseFloat((value / spending_12m).toFixed(2));\n        spending_by_category_weekend_list_12m.push({ category, value, transactions, percentual });\n      }\n    }\n    if (spending_by_category_weekend_list_12m && spending_by_category_weekend_list_12m.length) {\n      spending_by_category_weekend_list_12m.sort((a, b) => b.value - a.value);\n      top_03_spending_by_category_weekend_12m = spending_by_category_weekend_list_12m.splice(0, 3);\n    }\n\n    categories_03m = _.groupBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment), 'olivia_category_level1_id');\n\n    spending_transactions_credit_card_12m = _.size(spending.filter(t => t.date.getTime() <= end_year && t.account_type_id == 200));\n\n    spending_list_credit_card_12m = spending.filter(t => t.date.getTime() <= end_year && t.account_type_id == 200);\n\n    for (const i in spending_list_credit_card_12m) {\n      const m = moment(spending_list_credit_card_12m[i].date).format('MM');\n      spending_credit_card_by_month[m] = (spending_credit_card_by_month[m] || 0) + 1;\n    }\n    for (const m of Object.keys(spending_credit_card_by_month)) {\n      month_with_more_credit_card_transactions = (spending_credit_card_by_month[m] >= (spending_credit_card_by_month[month_with_more_credit_card_transactions] || 0)) ? m : month_with_more_credit_card_transactions;\n      max_credit_card_transactions = (spending_credit_card_by_month[m] >= spending_credit_card_by_month[month_with_more_credit_card_transactions] || 0) ? spending_credit_card_by_month[m] : spending_credit_card_by_month[month_with_more_credit_card_transactions];\n    }\n\n    var spending_01m_closed_transactions = spending.filter(t => t.date.getTime() >= start_1mo_closed && t.date.getTime() <= end_1mo_closed);\n\n    if (spending_01m_closed_transactions && spending_01m_closed_transactions.length > 0) {\n      spending_01m_closed = -_.sumBy(spending_01m_closed_transactions, 'amount').toFixed(2);\n      most_expensive_transaction_01m_closed = spending_01m_closed_transactions.reduce((first, second) => (first.amount < second.amount) ? first : second);\n      most_expensive_transaction_01m_closed = _.pick(most_expensive_transaction_01m_closed, ['description', 'amount']);\n    }\n\n    var spending_03m_transactions = spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment);\n\n    if (spending_03m_transactions && spending_03m_transactions.length > 0) {\n      spending_03m = -_.sumBy(spending_03m_transactions, 'amount').toFixed(2);\n      most_expensive_transaction_03m = spending_03m_transactions.reduce((first, second) => (first.amount < second.amount) ? first : second);\n      most_expensive_transaction_03m = _.pick(most_expensive_transaction_03m, ['description', 'amount']);\n    }\n\n    vendors_03m = _.groupBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && restrict_spending_categories.includes(t.olivia_category_level1_id)), 'relevant_description');\n    vendors_12m = _.groupBy(spending.filter(t => t.date.getTime() <= end_year && restrict_spending_categories.includes(t.olivia_category_level1_id)), 'relevant_description');\n    categories_01m = _.groupBy(spending.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment), 'olivia_category_level1_id');\n    categories_03m = _.groupBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment), 'olivia_category_level1_id');\n    categories_12m = _.groupBy(spending.filter(t => t.date.getTime() <= end_year), 'olivia_category_level1_id');\n    categories_this_month = _.groupBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment), 'olivia_category_level1_id');\n    variable_categories_this_month = _.groupBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment && t.budget_type === 'variable'), 'olivia_category_level1_id');\n    transactions_03m = _.size(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment));\n    food_and_drink_03m = -_.sumBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && [60000].includes(t.olivia_category_level1_id)), 'amount').toFixed(2);\n    groceries_03m = -_.sumBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && [115000].includes(t.olivia_category_level1_id)), 'amount').toFixed(2);\n    spending_01m = -_.sumBy(spending.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    spending_this_month = -_.sumBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    spending_03m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_3mo_closed && t.date.getTime() <= end_3mo_closed), 'amount').toFixed(2);\n    fixed_spending_01m = -_.sumBy(spending.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment && t.budget_type === 'fixed'), 'amount').toFixed(2);\n    variable_spending_01m = -_.sumBy(spending.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment && t.budget_type === 'variable'), 'amount').toFixed(2);\n    fixed_spending_this_month = -_.sumBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment && t.budget_type === 'fixed'), 'amount').toFixed(2);\n    variable_spending_this_month = -_.sumBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment && t.budget_type === 'variable'), 'amount').toFixed(2);\n    fixed_spending_03m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_3mo_closed && t.date.getTime() <= end_3mo_closed && t.budget_type === 'fixed'), 'amount').toFixed(2);\n    variable_spending_03m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_3mo_closed && t.date.getTime() <= end_3mo_closed && t.budget_type === 'variable'), 'amount').toFixed(2);\n    fixed_spending_06m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_6mo_closed && t.date.getTime() <= end_6mo_closed && t.budget_type === 'fixed'), 'amount').toFixed(2);\n    variable_spending_06m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_6mo_closed && t.date.getTime() <= end_6mo_closed && t.budget_type === 'variable'), 'amount').toFixed(2);\n  }\n\n  if (vendors_03m) {\n    for (const vendor of Object.keys(vendors_03m)) {\n      const value = -vendors_03m[vendor].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(vendors_03m[vendor]);\n      vendors_list_03m.push({ vendor, value, transactions });\n    }\n  }\n\n  if (vendors_list_03m && vendors_list_03m.length) {\n    vendors_list_03m.sort((a, b) => b.transactions - a.transactions);\n    top_03_vendors_list_03m = vendors_list_03m.splice(0, 3);\n  }\n\n  if (vendors_12m) {\n    for (const vendor of Object.keys(vendors_12m)) {\n      const value = -vendors_12m[vendor].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(vendors_12m[vendor]);\n      vendors_list_12m.push({ vendor, value, transactions });\n    }\n  }\n\n  if (vendors_list_12m && vendors_list_12m.length) {\n    vendors_list_12m.sort((a, b) => b.transactions - a.transactions);\n    top_03_vendors_list_12m = vendors_list_12m.splice(0, 3);\n  }\n\n  if (categories_01m) {\n    for (const category of Object.keys(categories_01m)) {\n      const value = -categories_01m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(categories_01m[category]);\n      const percentual = parseFloat((value / spending_01m).toFixed(2));\n      categories_list_01m.push({ category, value, transactions, percentual });\n    }\n  }\n  if (categories_list_01m && categories_list_01m.length) {\n    categories_list_01m.sort((a, b) => b.value - a.value);\n    top_03_categories_list_01m = categories_list_01m.splice(0, 3);\n  }\n\n  if (categories_03m) {\n    for (const category of Object.keys(categories_03m)) {\n      const value = -categories_03m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(categories_03m[category]);\n      const percentual = parseFloat((value / spending_03m).toFixed(2));\n      categories_list_03m.push({ category, value, transactions, percentual });\n    }\n  }\n  if (categories_list_03m && categories_list_03m.length) {\n    categories_list_03m.sort((a, b) => b.value - a.value);\n    top_03_categories_list_03m = categories_list_03m.splice(0, 3);\n  }\n  if (categories_12m) {\n    for (const category of Object.keys(categories_12m)) {\n      const value = -categories_12m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(categories_12m[category]);\n      const percentual = parseFloat((value / spending_12m).toFixed(2));\n      categories_list_12m.push({ category, value, transactions, percentual });\n    }\n  }\n  if (categories_list_12m && categories_list_12m.length) {\n    categories_list_12m.sort((a, b) => b.value - a.value);\n    top_03_categories_list_12m = categories_list_12m.splice(0, 3);\n  }\n\n  if (categories_this_month) {\n    for (const category of Object.keys(categories_this_month)) {\n      const value = -categories_this_month[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(categories_this_month[category]);\n      const percentual = parseFloat((value / spending_this_month).toFixed(2));\n      categories_list_this_month.push({ category, value, transactions, percentual });\n    }\n  }\n  if (categories_list_this_month && categories_list_this_month.length) {\n    categories_list_this_month.sort((a, b) => b.value - a.value);\n    top_03_categories_list_this_month = categories_list_this_month.splice(0, 3);\n  }\n\n  if (variable_categories_this_month) {\n    for (const category of Object.keys(variable_categories_this_month)) {\n      const value = -variable_categories_this_month[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(variable_categories_this_month[category]);\n      const percentual = parseFloat((value / spending_this_month).toFixed(2));\n      variable_categories_list_this_month.push({ category, value, transactions, percentual });\n    }\n  }\n  if (variable_categories_list_this_month && variable_categories_list_this_month.length) {\n    variable_categories_list_this_month.sort((a, b) => b.value - a.value);\n    top_03_variable_categories_list_this_month = variable_categories_list_this_month.splice(0, 3);\n  }\n\n  let income_12m = 0;\n  let income_06m = 0;\n  let income_03m = 0;\n  let income_01m = 0;\n  let income_03m_closed = 0;\n  let income_this_month = 0;\n  let income_paycheck_this_month = 0;\n  let income_list_12m = null;\n  let income_by_month = {};\n  let month_with_more_deposits = '01'\n\n  if (income && income.length) {\n    date_last_income_transaction = moment(_.minBy(income, 'date').date).format('YYYY-MM-DD');\n    income_transactions_12m = _.size(income.filter(t => t.date.getTime() <= end_year));\n    income_list_12m = income.filter(t => t.date.getTime() <= end_year);\n    for (const i in income_list_12m) {\n      const m = moment(income_list_12m[i].date).format('MM');\n      income_by_month[m] = (income_by_month[m] || 0) + income_list_12m[i].amount;\n    }\n    for (const m of Object.keys(income_by_month)) {\n      month_with_more_deposits = (income_by_month[m] >= (income_by_month[month_with_more_deposits] || 0)) ? m : month_with_more_deposits;\n    }\n    income_12m = _.sumBy(income_list_12m, 'amount').toFixed(2);\n    income_06m = _.sumBy(income.filter(t => t.date.getTime() >= sixMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    income_03m = _.sumBy(income.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    income_01m = _.sumBy(income.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    income_03m_closed = _.sumBy(income.filter(t => t.date.getTime() >= start_3mo_closed && t.date.getTime() <= end_3mo_closed), 'amount').toFixed(2);\n    income_this_month = _.sumBy(income.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    income_paycheck_this_month = _.sumBy(income.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment && [150300].includes(t.olivia_category_id)), 'amount').toFixed(2);\n  }\n\n  let annual_savings_year = income_12m - spending_12m;\n  let annual_savings_2020 = income_12m - spending_12m;\n\n  return {\n    v: '3.3',\n    update_at: moment().format('llll'),\n    spending_06m,\n    spending_03m,\n    spending_transactions_12m,\n    spending_12m,\n    income_transactions_12m,\n    top_03_vendors_list_03m,\n    top_03_vendors_list_12m,\n    top_03_categories_list_01m,\n    top_03_categories_list_03m,\n    top_03_categories_list_12m,\n    top_03_categories_list_this_month,\n    top_03_variable_categories_list_this_month,\n    transactions_03m,\n    food_and_drink_03m,\n    groceries_03m,\n    spending_01m,\n    spending_01m_closed,\n    spending_03m_closed,\n    spending_this_month,\n    fixed_spending_01m,\n    variable_spending_01m,\n    fixed_spending_03m_closed,\n    variable_spending_03m_closed,\n    fixed_spending_06m_closed,\n    variable_spending_06m_closed,\n    fixed_spending_this_month,\n    variable_spending_this_month,\n    income_12m,\n    income_06m,\n    income_03m,\n    income_01m,\n    income_03m_closed,\n    income_this_month,\n    income_paycheck_this_month,\n    income_by_month,\n    most_expensive_transaction_01m_closed,\n    most_expensive_transaction_03m,\n    month_with_more_deposits,\n    annual_savings_year,\n    annual_savings_2020,\n    spending_transactions_credit_card_12m,\n    spending_credit_card_by_month,\n    month_with_more_credit_card_transactions,\n    max_credit_card_transactions,\n    top_03_spending_by_category_weekdays_12m,\n    top_03_spending_by_category_weekend_12m,\n    savings_unpaired_transactions_03m,\n    savings_investments_accounts_03m,\n    savings_03m,\n    date_last_spending_transaction,\n    date_last_income_transaction\n  }\n"""
itau_deploy,L2 Category Shopping/Toys & Baby Supplies 60 Days Sum Amount,undefined,rvars.agg.l2cat110800.amt60d,undefined
itau_deploy,L1 Category Groceries 60 Days Sum Amount,undefined,rvars.agg.l1cat115000.amt60d,undefined
itau_deploy,L1 Category Education 60 Days Sum Amount,undefined,rvars.agg.l1cat20000.amt60d,undefined
itau_deploy,Unusual Expenses,Fixed expenses whose value varied over 15% total,rvars.agg.unusual_expense.transactions,"""  const moment = require('moment');\n\n  const unusualExpenseVariation = 15;\n  const transactionMinAmt = 30.00;\n\n  const start_last_month = moment.utc().subtract(1, 'month').startOf('month').valueOf();\n  const end_last_month = moment.utc().subtract(1, 'month').endOf('month').valueOf();\n  const start_actual_month = moment.utc().startOf('month').valueOf();\n  const end_actual_month = moment.utc().endOf('month').valueOf();\n\n  const agg = [];\n  const billsRelDesc = {};\n\n  for (const transaction of transactions) {\n    const m = transaction.date.getTime();\n    if (transaction.cashflow\n      && transaction.enabled\n      && !transaction.pending\n      && m >= start_last_month\n      && m <= end_actual_month\n      && [10100, 10200, 10300, 10400, 10500, 10600].includes(transaction.olivia_category_id)\n    ) {\n      // group bills per relevant description and category, summing previous and current month separately\n      const relDesc = `${transaction.olivia_category_id}${transaction.relevant_description}`;\n      billsRelDesc[relDesc] = billsRelDesc[relDesc]\n        || {\n        previous: 0,\n        current: 0,\n        transaction_id: transaction.transaction_id,\n        description: transaction.description,\n        vendor: transaction.relevant_description,\n        category_id: transaction.olivia_category_id,\n      };\n      if (m <= end_last_month) {\n        billsRelDesc[relDesc].previous -= transaction.amount;\n      } else if (m >= start_actual_month) {\n        billsRelDesc[relDesc].current -= transaction.amount;\n      }\n    }\n  }\n\n  // find out which bills should be talked about\n  for (const relDesc in billsRelDesc) {\n    // previous month expense must be higher than a minimum amount\n    if (billsRelDesc[relDesc].previous > transactionMinAmt && billsRelDesc[relDesc].current) {\n      const variation = parseFloat(\n        (billsRelDesc[relDesc].current / billsRelDesc[relDesc].previous * 100 - 100).toFixed(2)\n      );\n      // variation must be higher than a minimum\n      if (variation > unusualExpenseVariation) {\n        agg.push({\n          relevant_description: relDesc,\n          description: billsRelDesc[relDesc].description,\n          prev_month: moment.utc().subtract(1, 'month').startOf('month').month(),\n          prev_payment_amt: billsRelDesc[relDesc].previous,\n          actual_month: moment.utc().startOf('month').month(),\n          actual_month_amt: billsRelDesc[relDesc].current,\n          variation: variation / 100,\n          vendor: billsRelDesc[relDesc].vendor,\n          category_id: billsRelDesc[relDesc].category_id,\n          transaction_id: billsRelDesc[relDesc].transaction_id,\n        });\n      }\n    }\n  }\n\n  return agg;\n"""
itau_deploy,Bills by Category and Description,Aggregate bills by category and description,rvars.agg.bills_by_category_and_description.last_6m,"""    const moment = require('moment');\n\n    const start_six_months_ago = moment.utc().subtract(6, 'months').startOf('month').valueOf();\n    const end_current_month = moment.utc().endOf('month').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_six_months_ago\n            && m <= end_current_month\n            && [10100, 10200, 10300, 10400, 10500, 10600].includes(transaction.olivia_category_id)\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}${transaction.relevant_description}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                account_id: transaction.account_id,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                month: moment(transaction.date.getTime()).month(),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    for (const relDesc in billsRelDesc) {\n        billsRelDesc[relDesc].sort((a, b) => a.timestamp - b.timestamp);\n        let last_value = 0;\n        let last_month = -1;\n        for (const i in billsRelDesc[relDesc]) {\n            const previous_month_number = (billsRelDesc[relDesc][i].month + 11) % 12;\n            if (last_month >= 0 && last_month == previous_month_number && last_value != 0) {\n                billsRelDesc[relDesc][i].variation = (billsRelDesc[relDesc][i].amount / last_value) - 1;\n            }\n            else {\n                billsRelDesc[relDesc][i].variation = 0;\n            }\n            last_value = billsRelDesc[relDesc][i].amount;\n            last_month = billsRelDesc[relDesc][i].month;\n        };\n    }\n\n    return billsRelDesc;\n"""
itau_deploy,L1 Category Savings & Investments 90 Days Sum Amount,undefined,rvars.agg.l1cat260000.amt90d,undefined
act_gas_station_programs_shell,Shell Expenses Last Month,undefined,rvars.agg.shell.amt_1m,undefined
act_pet_savings_cobasi,Cobasi Expenses Last 2 Months,undefined,rvars.agg.cobasi.amt_2m,undefined
act_pet_savings_petlove,Petlove Expenses Last 2 Months,undefined,rvars.agg.petlove.amt_2m,undefined
inf_self_comparison_stable_expenses,L1 Category Groceries 15 Days/4 months Sum Amount,L1 Category Groceries 15 Days/4 months Sum Amount,rvars.agg.l1cat115000.sum15days4months,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.olivia_category_level1_id === 115000 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_stable_expenses,L1 Category Food & Drink 15 Days/4 months Sum Amount,L1 Category Food & Drink 15 Days/4 months Sum Amount,rvars.agg.l1cat60000.sum15days4months,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.olivia_category_level1_id === 60000 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_stable_expenses,L1 Category Pets 15 Days/4 months Sum Amount,L1 Category Pets 15 Days/4 months Sum Amount,rvars.agg.l1cat1000014.sum15days4months,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.olivia_category_level1_id === 1000014 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_stable_expenses,L2 Category Healthcare/Pharmacy 15 Days/4months Sum Amount,L2 Category Healthcare/Pharmacy 15 Days/4months Sum Amount,rvars.agg.l2cat70300.sum15days4months,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.olivia_category_level2_id === 70300 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_stable_expenses,L1 Category Groceries 15 Days/4 months Sum Amount without creditcard,L1 Category Groceries 15 Days/4 months Sum Amount without creditcard,rvars.agg.l1cat115000.sum15days4monthswithoutcreditcard,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.account_type_id != 200 &&\n            t.olivia_category_level1_id === 115000 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_stable_expenses,L1 Category Food & Drink 15 Days/4 months Sum Amount without creditcard,L1 Category Food & Drink 15 Days/4 months Sum Amount without creditcard,rvars.agg.l1cat60000.sum15days4monthswithoutcreditcard,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.account_type_id != 200 &&\n            t.olivia_category_level1_id === 60000 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_stable_expenses,L1 Category Pets 15 Days/4 months Sum Amount without creditcard,L1 Category Pets 15 Days/4 months Sum Amount without creditcard,rvars.agg.l1cat1000014.sum15days4monthswithoutcreditcard,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.account_type_id != 200 &&\n            t.olivia_category_level1_id === 1000014 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_stable_expenses,L2 Category Healthcare/Pharmacy 15 Days/4months Sum Amount without creditcard,L2 Category Healthcare/Pharmacy 15 Days/4months Sum Amount without creditcard,rvars.agg.l2cat70300.sum15days4monthswithoutcreditcard,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.account_type_id != 200 &&\n            t.olivia_category_level2_id === 70300 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_alert_unusual_expense_celular,Bills by Category and Description,Aggregate bills by category and description,rvars.agg.bills_by_category_and_description.last_6m,"""    const moment = require('moment');\n\n    const start_six_months_ago = moment.utc().subtract(6, 'months').startOf('month').valueOf();\n    const end_current_month = moment.utc().endOf('month').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_six_months_ago\n            && m <= end_current_month\n            && [10100, 10200, 10300, 10400, 10500, 10600].includes(transaction.olivia_category_id)\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}${transaction.relevant_description}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                account_id: transaction.account_id,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                month: moment(transaction.date.getTime()).month(),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    for (const relDesc in billsRelDesc) {\n        billsRelDesc[relDesc].sort((a, b) => a.timestamp - b.timestamp);\n        let last_value = 0;\n        let last_month = -1;\n        for (const i in billsRelDesc[relDesc]) {\n            const previous_month_number = (billsRelDesc[relDesc][i].month + 11) % 12;\n            if (last_month >= 0 && last_month == previous_month_number && last_value != 0) {\n                billsRelDesc[relDesc][i].variation = (billsRelDesc[relDesc][i].amount / last_value) - 1;\n            }\n            else {\n                billsRelDesc[relDesc][i].variation = 0;\n            }\n            last_value = billsRelDesc[relDesc][i].amount;\n            last_month = billsRelDesc[relDesc][i].month;\n        };\n    }\n\n    return billsRelDesc;\n"""
inf_alert_you_got_paid_not_spender,Income Transactions Since 7 Days Ago,Aggregate income transactions since the last 7 days,rvars.agg.income_transactions.last_7d,"""    const moment = require('moment');\n\n    const LOAN_OR_INVESTMENT_ACCOUNT_TYPE_IDS = [103, 104, 105, 201, 202, 203];\n    const seven_days_ago = moment.utc().subtract(7, 'days').startOf('day').valueOf();\n    const current_time = moment.utc().valueOf();\n    const income_array = [];\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.cashflow_type === 'in'\n            && !LOAN_OR_INVESTMENT_ACCOUNT_TYPE_IDS.includes(transaction.account_type_id)\n            && transaction.enabled\n            && !transaction.pending\n            && m >= seven_days_ago\n            && m <= current_time\n        ) {\n            const transaction_data = {\n                amount: transaction.amount,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                transaction_id: transaction.transaction_id,\n                olivia_category_id: transaction.olivia_category_id,\n                description: transaction.description\n            };\n\n            income_array.push(transaction_data);\n        }\n    }\n\n    income_array.sort((a, b) => a.timestamp - b.timestamp);\n\n    return income_array;\n"""
inf_alert_you_got_paid_spender,Income Transactions Since 7 Days Ago,Aggregate income transactions since the last 7 days,rvars.agg.income_transactions.last_7d,"""    const moment = require('moment');\n\n    const LOAN_OR_INVESTMENT_ACCOUNT_TYPE_IDS = [103, 104, 105, 201, 202, 203];\n    const seven_days_ago = moment.utc().subtract(7, 'days').startOf('day').valueOf();\n    const current_time = moment.utc().valueOf();\n    const income_array = [];\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.cashflow_type === 'in'\n            && !LOAN_OR_INVESTMENT_ACCOUNT_TYPE_IDS.includes(transaction.account_type_id)\n            && transaction.enabled\n            && !transaction.pending\n            && m >= seven_days_ago\n            && m <= current_time\n        ) {\n            const transaction_data = {\n                amount: transaction.amount,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                transaction_id: transaction.transaction_id,\n                olivia_category_id: transaction.olivia_category_id,\n                description: transaction.description\n            };\n\n            income_array.push(transaction_data);\n        }\n    }\n\n    income_array.sort((a, b) => a.timestamp - b.timestamp);\n\n    return income_array;\n"""
inf_uso_cartao_virtual,Credit Card Expenses,undefined,rvars.agg.credit_card.totals,"""    const moment = require('moment');\n    const last_30d = moment().subtract(30, 'days').startOf('day').valueOf();\n    const last_90d = moment().subtract(90, 'days').startOf('day').valueOf();\n    const last_120d = moment().subtract(120, 'days').startOf('day').valueOf();\n    const last_180d = moment().subtract(180, 'days').startOf('day').valueOf();\n    const credit_card_transactions = transactions.filter(t => t.enabled && t.account_type_id == 200);\n\n    const credit_card_expenses = credit_card_transactions.filter(t =>\n        (t.budget_type === 'variable' || t.budget_type === 'fixed')\n        && t.cashflow === true\n        && t.cashflow_type === 'out');\n\n    const spending_30d = credit_card_expenses.filter(t => t.date.getTime() >= last_30d).reduce((acc, item) => acc - item.amount, 0);\n    const spending_90d = credit_card_expenses.filter(t => t.date.getTime() >= last_90d).reduce((acc, item) => acc - item.amount, 0);\n    const spending_120d = credit_card_expenses.filter(t => t.date.getTime() >= last_120d).reduce((acc, item) => acc - item.amount, 0);\n    const spending_180d = credit_card_expenses.filter(t => t.date.getTime() >= last_180d).reduce((acc, item) => acc - item.amount, 0);\n    return { spending_30d, spending_90d, spending_120d, spending_180d };\n"""
inf_alert_you_got_paid_spender_other_gains,Income Transactions Since 7 Days Ago,Aggregate income transactions since the last 7 days,rvars.agg.income_transactions.last_7d,"""    const moment = require('moment');\n\n    const LOAN_OR_INVESTMENT_ACCOUNT_TYPE_IDS = [103, 104, 105, 201, 202, 203];\n    const seven_days_ago = moment.utc().subtract(7, 'days').startOf('day').valueOf();\n    const current_time = moment.utc().valueOf();\n    const income_array = [];\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.cashflow_type === 'in'\n            && !LOAN_OR_INVESTMENT_ACCOUNT_TYPE_IDS.includes(transaction.account_type_id)\n            && transaction.enabled\n            && !transaction.pending\n            && m >= seven_days_ago\n            && m <= current_time\n        ) {\n            const transaction_data = {\n                amount: transaction.amount,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                transaction_id: transaction.transaction_id,\n                olivia_category_id: transaction.olivia_category_id,\n                description: transaction.description\n            };\n\n            income_array.push(transaction_data);\n        }\n    }\n\n    income_array.sort((a, b) => a.timestamp - b.timestamp);\n\n    return income_array;\n"""
idl_teste_2,L2 Category Groceries/Market & Supermarket 30 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt30d,undefined
idl_teste_2,Google Play - Last_30_Days,undefined,rvars.agg.google_play.amt30d,undefined
idl_teste_2,L2 Category Groceries/Market & Supermarket 60 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt60d,undefined
idl_teste_2,Any spend - 30 days ago,undefined,rvars.agg.any_spend.last_30_days,"""const _ = require('lodash');\nconst moment = require('moment');\n\nconst oneMonthAgo = moment().subtract(1, 'month').startOf('day').valueOf();\n\ntransactions = transactions.filter(t => t.date.getTime() >= oneMonthAgo && t.enabled && t.budget_type === 'variable' && t.cashflow === true && t.cashflow_type === 'out');\n\nlet amt30d = 0;\n\nif (transactions) {\n    amt30d = -_.sumBy(transactions, 'amount');\n}\n\nreturn {\n  amt30d\n}"""
idl_teste_4,L2 Category Groceries/Market & Supermarket 30 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt30d,undefined
idl_teste_4,Google Play - Last_30_Days,undefined,rvars.agg.google_play.amt30d,undefined
idl_teste_4,L2 Category Groceries/Market & Supermarket 60 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt60d,undefined
idl_teste_4,Any spend - 30 days ago,undefined,rvars.agg.any_spend.last_30_days,"""const _ = require('lodash');\nconst moment = require('moment');\n\nconst oneMonthAgo = moment().subtract(1, 'month').startOf('day').valueOf();\n\ntransactions = transactions.filter(t => t.date.getTime() >= oneMonthAgo && t.enabled && t.budget_type === 'variable' && t.cashflow === true && t.cashflow_type === 'out');\n\nlet amt30d = 0;\n\nif (transactions) {\n    amt30d = -_.sumBy(transactions, 'amount');\n}\n\nreturn {\n  amt30d\n}"""
idl_teste_5,L2 Category Groceries/Market & Supermarket 30 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt30d,undefined
idl_teste_5,Google Play - Last_30_Days,undefined,rvars.agg.google_play.amt30d,undefined
idl_teste_5,L2 Category Groceries/Market & Supermarket 60 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt60d,undefined
idl_teste_5,Any spend - 30 days ago,undefined,rvars.agg.any_spend.last_30_days,"""const _ = require('lodash');\nconst moment = require('moment');\n\nconst oneMonthAgo = moment().subtract(1, 'month').startOf('day').valueOf();\n\ntransactions = transactions.filter(t => t.date.getTime() >= oneMonthAgo && t.enabled && t.budget_type === 'variable' && t.cashflow === true && t.cashflow_type === 'out');\n\nlet amt30d = 0;\n\nif (transactions) {\n    amt30d = -_.sumBy(transactions, 'amount');\n}\n\nreturn {\n  amt30d\n}"""
idl_teste_6,L2 Category Groceries/Market & Supermarket 30 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt30d,undefined
idl_teste_6,Google Play - Last_30_Days,undefined,rvars.agg.google_play.amt30d,undefined
idl_teste_6,L2 Category Groceries/Market & Supermarket 60 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt60d,undefined
idl_teste_6,Any spend - 30 days ago,undefined,rvars.agg.any_spend.last_30_days,"""const _ = require('lodash');\nconst moment = require('moment');\n\nconst oneMonthAgo = moment().subtract(1, 'month').startOf('day').valueOf();\n\ntransactions = transactions.filter(t => t.date.getTime() >= oneMonthAgo && t.enabled && t.budget_type === 'variable' && t.cashflow === true && t.cashflow_type === 'out');\n\nlet amt30d = 0;\n\nif (transactions) {\n    amt30d = -_.sumBy(transactions, 'amount');\n}\n\nreturn {\n  amt30d\n}"""
idl_teste_7,L2 Category Groceries/Market & Supermarket 30 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt30d,undefined
idl_teste_7,Google Play - Last_30_Days,undefined,rvars.agg.google_play.amt30d,undefined
idl_teste_7,L2 Category Groceries/Market & Supermarket 60 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt60d,undefined
idl_teste_7,Any spend - 30 days ago,undefined,rvars.agg.any_spend.last_30_days,"""const _ = require('lodash');\nconst moment = require('moment');\n\nconst oneMonthAgo = moment().subtract(1, 'month').startOf('day').valueOf();\n\ntransactions = transactions.filter(t => t.date.getTime() >= oneMonthAgo && t.enabled && t.budget_type === 'variable' && t.cashflow === true && t.cashflow_type === 'out');\n\nlet amt30d = 0;\n\nif (transactions) {\n    amt30d = -_.sumBy(transactions, 'amount');\n}\n\nreturn {\n  amt30d\n}"""
idl_teste_8,L2 Category Groceries/Market & Supermarket 30 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt30d,undefined
idl_teste_8,Google Play - Last_30_Days,undefined,rvars.agg.google_play.amt30d,undefined
idl_teste_8,L2 Category Groceries/Market & Supermarket 60 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt60d,undefined
idl_teste_8,Any spend - 30 days ago,undefined,rvars.agg.any_spend.last_30_days,"""const _ = require('lodash');\nconst moment = require('moment');\n\nconst oneMonthAgo = moment().subtract(1, 'month').startOf('day').valueOf();\n\ntransactions = transactions.filter(t => t.date.getTime() >= oneMonthAgo && t.enabled && t.budget_type === 'variable' && t.cashflow === true && t.cashflow_type === 'out');\n\nlet amt30d = 0;\n\nif (transactions) {\n    amt30d = -_.sumBy(transactions, 'amount');\n}\n\nreturn {\n  amt30d\n}"""
idl_teste_1,L2 Category Groceries/Market & Supermarket 30 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt30d,undefined
idl_teste_1,Google Play - Last_30_Days,undefined,rvars.agg.google_play.amt30d,undefined
idl_teste_1,L2 Category Groceries/Market & Supermarket 60 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt60d,undefined
idl_teste_1,Any spend - 30 days ago,undefined,rvars.agg.any_spend.last_30_days,"""const _ = require('lodash');\nconst moment = require('moment');\n\nconst oneMonthAgo = moment().subtract(1, 'month').startOf('day').valueOf();\n\ntransactions = transactions.filter(t => t.date.getTime() >= oneMonthAgo && t.enabled && t.budget_type === 'variable' && t.cashflow === true && t.cashflow_type === 'out');\n\nlet amt30d = 0;\n\nif (transactions) {\n    amt30d = -_.sumBy(transactions, 'amount');\n}\n\nreturn {\n  amt30d\n}"""
inf_alert_you_got_paid_not_spender_other_gains,Income Transactions Since 7 Days Ago,Aggregate income transactions since the last 7 days,rvars.agg.income_transactions.last_7d,"""    const moment = require('moment');\n\n    const LOAN_OR_INVESTMENT_ACCOUNT_TYPE_IDS = [103, 104, 105, 201, 202, 203];\n    const seven_days_ago = moment.utc().subtract(7, 'days').startOf('day').valueOf();\n    const current_time = moment.utc().valueOf();\n    const income_array = [];\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.cashflow_type === 'in'\n            && !LOAN_OR_INVESTMENT_ACCOUNT_TYPE_IDS.includes(transaction.account_type_id)\n            && transaction.enabled\n            && !transaction.pending\n            && m >= seven_days_ago\n            && m <= current_time\n        ) {\n            const transaction_data = {\n                amount: transaction.amount,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                transaction_id: transaction.transaction_id,\n                olivia_category_id: transaction.olivia_category_id,\n                description: transaction.description\n            };\n\n            income_array.push(transaction_data);\n        }\n    }\n\n    income_array.sort((a, b) => a.timestamp - b.timestamp);\n\n    return income_array;\n"""
idl_teste_Bis,L2 Category Groceries/Market & Supermarket 30 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt30d,undefined
idl_teste_Bis,Google Play - Last_30_Days,undefined,rvars.agg.google_play.amt30d,undefined
idl_teste_Bis,L2 Category Groceries/Market & Supermarket 60 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt60d,undefined
idl_teste_Bis,Any spend - 30 days ago,undefined,rvars.agg.any_spend.last_30_days,"""const _ = require('lodash');\nconst moment = require('moment');\n\nconst oneMonthAgo = moment().subtract(1, 'month').startOf('day').valueOf();\n\ntransactions = transactions.filter(t => t.date.getTime() >= oneMonthAgo && t.enabled && t.budget_type === 'variable' && t.cashflow === true && t.cashflow_type === 'out');\n\nlet amt30d = 0;\n\nif (transactions) {\n    amt30d = -_.sumBy(transactions, 'amount');\n}\n\nreturn {\n  amt30d\n}"""
act_pet_savings_cobasi_b,Cobasi Expenses Last 2 Months,undefined,rvars.agg.cobasi.amt_2m,undefined
idl_teste_3,L2 Category Groceries/Market & Supermarket 30 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt30d,undefined
idl_teste_3,Google Play - Last_30_Days,undefined,rvars.agg.google_play.amt30d,undefined
idl_teste_3,L2 Category Groceries/Market & Supermarket 60 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt60d,undefined
idl_teste_3,Any spend - 30 days ago,undefined,rvars.agg.any_spend.last_30_days,"""const _ = require('lodash');\nconst moment = require('moment');\n\nconst oneMonthAgo = moment().subtract(1, 'month').startOf('day').valueOf();\n\ntransactions = transactions.filter(t => t.date.getTime() >= oneMonthAgo && t.enabled && t.budget_type === 'variable' && t.cashflow === true && t.cashflow_type === 'out');\n\nlet amt30d = 0;\n\nif (transactions) {\n    amt30d = -_.sumBy(transactions, 'amount');\n}\n\nreturn {\n  amt30d\n}"""
act_pet_savings_petlove_b,Petlove Expenses Last 2 Months,undefined,rvars.agg.petlove.amt_2m,undefined
act_gas_station_programs_ipiranga,Ipiranga Expenses Last Month,undefined,rvars.agg.ipiranga.amt_1m,undefined
act_pet_savings_petz,Petz Expenses Last 2 Months,undefined,rvars.agg.petz.amt_2m,undefined
act_pet_savings_petz_b,Petz Expenses Last 2 Months,undefined,rvars.agg.petz.amt_2m,undefined
act_spotify_offer,L2 Category Shopping/Toys & Baby Supplies 60 Days Sum Amount,undefined,rvars.agg.l2cat110800.amt60d,undefined
act_spotify_offer,L1 Category Groceries 60 Days Sum Amount,undefined,rvars.agg.l1cat115000.amt60d,undefined
act_spotify_offer,Total Spending and Income - Last 06 months,Agg Income and Spendind last 6 months. Save values for 3 months. Calculate top Vendors and Categories last 3 months.,rvars.agg.total_spending_and_income.totals,"""  const _ = require('lodash');\n  const moment = require('moment');\n\n  const restrict_spending_categories = [\n    10000,\n    20000,\n    30000,\n    40000,\n    50000,\n    60000,\n    70000,\n    80000,\n    90000,\n    10000014,\n    110000,\n    115000,\n    120000,\n    130000,\n  ];\n\n  const week_days_comparison_restrict_spending_categories = [\n    20000,\n    30000,\n    50000,\n    60000,\n    70000,\n    90000,\n    10000014,\n    110000,\n    115000,\n    120000,\n    130000,\n  ];\n\n  const start_1mo_closed = moment().subtract(1, 'month').startOf('month').valueOf();\n  const end_1mo_closed = moment().subtract(1, 'month').endOf('month').valueOf();\n  const start_3mo_closed = moment().subtract(3, 'month').startOf('month').valueOf();\n  const end_3mo_closed = moment().subtract(1, 'month').endOf('month').valueOf();\n  const start_6mo_closed = moment().subtract(6, 'month').startOf('month').valueOf();\n  const end_6mo_closed = moment().subtract(1, 'month').endOf('month').valueOf();\n  const start_this_month = moment().startOf('month').valueOf();\n  const oneMonthsAgo = moment().subtract(1, 'month').startOf('day').add(1, 'day').valueOf();\n  const threeMonthsAgo = moment().subtract(3, 'month').add(1, 'day').startOf('day').valueOf();\n  const sixMonthsAgo = moment().subtract(6, 'month').add(1, 'day').startOf('day').valueOf();\n\n  const start_year = moment('2021-01-01').valueOf();\n  const end_year = moment('2021-12-31').valueOf();\n  const this_moment = moment().utc().valueOf();\n  let spending = [];\n  let income = [];\n  let savings = [];\n\n  if (transactions && transactions.length) {\n    spending = transactions.filter(t => t.date.getTime() >= start_year &&\n      t.enabled && (t.budget_type === 'variable' || t.budget_type === 'fixed') && t.cashflow === true && t.cashflow_type === 'out');\n    income = transactions.filter(t => t.date.getTime() >= start_year && t.enabled && t.cashflow === true && t.cashflow_type === 'in');\n\n    savings = transactions.filter(t => t.date.getTime() >= start_year && t.enabled && t.cashflow === true && t.cashflow_type === 'nil' && [260000].includes(t.olivia_category_level1_id));\n  }\n\n  let date_last_income_transaction;\n  let date_last_spending_transaction;\n\n  let spending_12m = 0;\n  let spending_by_category_weekdays_12m = 0;\n  let spending_by_category_weekends_12m = 0;\n  let spending_06m = 0;\n  let spending_03m = 0;\n  let spending_01m = 0;\n  let spending_this_month = 0;\n  let savings_03m = 0;\n  let savings_unpaired_transactions_03m = 0;\n  let savings_investments_accounts_03m = 0;\n  let vendors_03m = null;\n  let vendors_12m = null;\n  let categories_01m = null;\n  let categories_03m = null;\n  let categories_12m = null;\n  let categories_this_month = null;\n  let variable_categories_this_month = null;\n  let transactions_03m = 0;\n  let spending_transactions_12m = 0;\n  let spending_transactions_credit_card_12m = 0;\n  let spending_list_credit_card_12m = [];\n  let income_transactions_12m = 0;\n  let food_and_drink_03m = 0;\n  let groceries_03m = 0;\n  let spending_01m_closed = 0;\n  let spending_03m_closed = 0;\n  let fixed_spending_01m = 0;\n  let variable_spending_01m = 0;\n  let fixed_spending_03m_closed = 0;\n  let variable_spending_03m_closed = 0;\n  let fixed_spending_06m_closed = 0;\n  let variable_spending_06m_closed = 0;\n  let fixed_spending_this_month = 0;\n  let variable_spending_this_month = 0;\n  let vendors_list_03m = [];\n  let vendors_list_12m = [];\n  let top_03_vendors_list_03m = [];\n  let top_03_vendors_list_12m = [];\n  let categories_list_this_month = [];\n  let top_03_categories_list_this_month = [];\n  let variable_categories_list_this_month = [];\n  let top_03_variable_categories_list_this_month = [];\n  let categories_list_01m = [];\n  let top_03_categories_list_01m = [];\n  let categories_list_03m = [];\n  let top_03_categories_list_03m = [];\n  let categories_list_12m = [];\n  let top_03_categories_list_12m = [];\n  let spending_credit_card_by_month = {};\n  let month_with_more_credit_card_transactions = '01';\n  let max_credit_card_transactions = 0;\n  let spending_by_category_weekend_list_12m = [];\n  let spending_by_category_weekdays_list_12m = [];\n  let top_03_spending_by_category_weekdays_12m = [];\n  let top_03_spending_by_category_weekend_12m = [];\n  let most_expensive_transaction_01m_closed = null;\n  let most_expensive_transaction_03m = null;\n\n  if (savings && savings.length) {\n    savings_unpaired_transactions_03m = -_.sumBy(savings.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && !t.paired_transaction_id), 'amount').toFixed(2);\n    savings_investments_accounts_03m = -_.sumBy(savings.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && [101, 103, 104, 105, 106].includes(t.account_type_id) && (t.account_type_id != 106 || !t.paired_transaction_id)), 'amount').toFixed(2);\n    savings_03m = savings_unpaired_transactions_03m - savings_investments_accounts_03m;\n  }\n\n  if (spending && spending.length) {\n    date_last_spending_transaction = moment(_.minBy(spending, 'date').date).format('YYYY-MM-DD');\n    spending_06m = -_.sumBy(spending.filter(t => t.date.getTime() >= sixMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    spending_12m = -_.sumBy(spending.filter(t => t.date.getTime() <= end_year), 'amount').toFixed(2);\n    spending_transactions_12m = _.size(spending.filter(t => t.date.getTime() <= end_year));\n\n    spending_by_category_weekdays_12m = _.groupBy(spending.filter(t => (moment(t.date).utc().day() != 0 && moment(t.date).utc().day() != 6) && t.date.getTime() <= end_year && week_days_comparison_restrict_spending_categories.includes(t.olivia_category_level1_id)), 'olivia_category_level1_id');;\n    if (spending_by_category_weekdays_12m) {\n      for (const category of Object.keys(spending_by_category_weekdays_12m)) {\n        const value = -spending_by_category_weekdays_12m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n        const transactions = _.size(spending_by_category_weekdays_12m[category]);\n        const percentual = parseFloat((value / spending_12m).toFixed(2));\n        spending_by_category_weekdays_list_12m.push({ category, value, transactions, percentual });\n      }\n    }\n    if (spending_by_category_weekdays_list_12m && spending_by_category_weekdays_list_12m.length) {\n      spending_by_category_weekdays_list_12m.sort((a, b) => b.value - a.value);\n      top_03_spending_by_category_weekdays_12m = spending_by_category_weekdays_list_12m.splice(0, 3);\n    }\n\n    spending_by_category_weekends_12m = _.groupBy(spending.filter(t => (moment(t.date).utc().day() == 0 || moment(t.date).utc().day() == 6) && t.date.getTime() <= end_year && week_days_comparison_restrict_spending_categories.includes(t.olivia_category_level1_id)), 'olivia_category_level1_id');;\n    if (spending_by_category_weekends_12m) {\n      for (const category of Object.keys(spending_by_category_weekends_12m)) {\n        const value = -spending_by_category_weekends_12m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n        const transactions = _.size(spending_by_category_weekends_12m[category]);\n        const percentual = parseFloat((value / spending_12m).toFixed(2));\n        spending_by_category_weekend_list_12m.push({ category, value, transactions, percentual });\n      }\n    }\n    if (spending_by_category_weekend_list_12m && spending_by_category_weekend_list_12m.length) {\n      spending_by_category_weekend_list_12m.sort((a, b) => b.value - a.value);\n      top_03_spending_by_category_weekend_12m = spending_by_category_weekend_list_12m.splice(0, 3);\n    }\n\n    categories_03m = _.groupBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment), 'olivia_category_level1_id');\n\n    spending_transactions_credit_card_12m = _.size(spending.filter(t => t.date.getTime() <= end_year && t.account_type_id == 200));\n\n    spending_list_credit_card_12m = spending.filter(t => t.date.getTime() <= end_year && t.account_type_id == 200);\n\n    for (const i in spending_list_credit_card_12m) {\n      const m = moment(spending_list_credit_card_12m[i].date).format('MM');\n      spending_credit_card_by_month[m] = (spending_credit_card_by_month[m] || 0) + 1;\n    }\n    for (const m of Object.keys(spending_credit_card_by_month)) {\n      month_with_more_credit_card_transactions = (spending_credit_card_by_month[m] >= (spending_credit_card_by_month[month_with_more_credit_card_transactions] || 0)) ? m : month_with_more_credit_card_transactions;\n      max_credit_card_transactions = (spending_credit_card_by_month[m] >= spending_credit_card_by_month[month_with_more_credit_card_transactions] || 0) ? spending_credit_card_by_month[m] : spending_credit_card_by_month[month_with_more_credit_card_transactions];\n    }\n\n    var spending_01m_closed_transactions = spending.filter(t => t.date.getTime() >= start_1mo_closed && t.date.getTime() <= end_1mo_closed);\n\n    if (spending_01m_closed_transactions && spending_01m_closed_transactions.length > 0) {\n      spending_01m_closed = -_.sumBy(spending_01m_closed_transactions, 'amount').toFixed(2);\n      most_expensive_transaction_01m_closed = spending_01m_closed_transactions.reduce((first, second) => (first.amount < second.amount) ? first : second);\n      most_expensive_transaction_01m_closed = _.pick(most_expensive_transaction_01m_closed, ['description', 'amount']);\n    }\n\n    var spending_03m_transactions = spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment);\n\n    if (spending_03m_transactions && spending_03m_transactions.length > 0) {\n      spending_03m = -_.sumBy(spending_03m_transactions, 'amount').toFixed(2);\n      most_expensive_transaction_03m = spending_03m_transactions.reduce((first, second) => (first.amount < second.amount) ? first : second);\n      most_expensive_transaction_03m = _.pick(most_expensive_transaction_03m, ['description', 'amount']);\n    }\n\n    vendors_03m = _.groupBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && restrict_spending_categories.includes(t.olivia_category_level1_id)), 'relevant_description');\n    vendors_12m = _.groupBy(spending.filter(t => t.date.getTime() <= end_year && restrict_spending_categories.includes(t.olivia_category_level1_id)), 'relevant_description');\n    categories_01m = _.groupBy(spending.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment), 'olivia_category_level1_id');\n    categories_03m = _.groupBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment), 'olivia_category_level1_id');\n    categories_12m = _.groupBy(spending.filter(t => t.date.getTime() <= end_year), 'olivia_category_level1_id');\n    categories_this_month = _.groupBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment), 'olivia_category_level1_id');\n    variable_categories_this_month = _.groupBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment && t.budget_type === 'variable'), 'olivia_category_level1_id');\n    transactions_03m = _.size(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment));\n    food_and_drink_03m = -_.sumBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && [60000].includes(t.olivia_category_level1_id)), 'amount').toFixed(2);\n    groceries_03m = -_.sumBy(spending.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment && [115000].includes(t.olivia_category_level1_id)), 'amount').toFixed(2);\n    spending_01m = -_.sumBy(spending.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    spending_this_month = -_.sumBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    spending_03m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_3mo_closed && t.date.getTime() <= end_3mo_closed), 'amount').toFixed(2);\n    fixed_spending_01m = -_.sumBy(spending.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment && t.budget_type === 'fixed'), 'amount').toFixed(2);\n    variable_spending_01m = -_.sumBy(spending.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment && t.budget_type === 'variable'), 'amount').toFixed(2);\n    fixed_spending_this_month = -_.sumBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment && t.budget_type === 'fixed'), 'amount').toFixed(2);\n    variable_spending_this_month = -_.sumBy(spending.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment && t.budget_type === 'variable'), 'amount').toFixed(2);\n    fixed_spending_03m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_3mo_closed && t.date.getTime() <= end_3mo_closed && t.budget_type === 'fixed'), 'amount').toFixed(2);\n    variable_spending_03m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_3mo_closed && t.date.getTime() <= end_3mo_closed && t.budget_type === 'variable'), 'amount').toFixed(2);\n    fixed_spending_06m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_6mo_closed && t.date.getTime() <= end_6mo_closed && t.budget_type === 'fixed'), 'amount').toFixed(2);\n    variable_spending_06m_closed = -_.sumBy(spending.filter(t => t.date.getTime() >= start_6mo_closed && t.date.getTime() <= end_6mo_closed && t.budget_type === 'variable'), 'amount').toFixed(2);\n  }\n\n  if (vendors_03m) {\n    for (const vendor of Object.keys(vendors_03m)) {\n      const value = -vendors_03m[vendor].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(vendors_03m[vendor]);\n      vendors_list_03m.push({ vendor, value, transactions });\n    }\n  }\n\n  if (vendors_list_03m && vendors_list_03m.length) {\n    vendors_list_03m.sort((a, b) => b.transactions - a.transactions);\n    top_03_vendors_list_03m = vendors_list_03m.splice(0, 3);\n  }\n\n  if (vendors_12m) {\n    for (const vendor of Object.keys(vendors_12m)) {\n      const value = -vendors_12m[vendor].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(vendors_12m[vendor]);\n      vendors_list_12m.push({ vendor, value, transactions });\n    }\n  }\n\n  if (vendors_list_12m && vendors_list_12m.length) {\n    vendors_list_12m.sort((a, b) => b.transactions - a.transactions);\n    top_03_vendors_list_12m = vendors_list_12m.splice(0, 3);\n  }\n\n  if (categories_01m) {\n    for (const category of Object.keys(categories_01m)) {\n      const value = -categories_01m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(categories_01m[category]);\n      const percentual = parseFloat((value / spending_01m).toFixed(2));\n      categories_list_01m.push({ category, value, transactions, percentual });\n    }\n  }\n  if (categories_list_01m && categories_list_01m.length) {\n    categories_list_01m.sort((a, b) => b.value - a.value);\n    top_03_categories_list_01m = categories_list_01m.splice(0, 3);\n  }\n\n  if (categories_03m) {\n    for (const category of Object.keys(categories_03m)) {\n      const value = -categories_03m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(categories_03m[category]);\n      const percentual = parseFloat((value / spending_03m).toFixed(2));\n      categories_list_03m.push({ category, value, transactions, percentual });\n    }\n  }\n  if (categories_list_03m && categories_list_03m.length) {\n    categories_list_03m.sort((a, b) => b.value - a.value);\n    top_03_categories_list_03m = categories_list_03m.splice(0, 3);\n  }\n  if (categories_12m) {\n    for (const category of Object.keys(categories_12m)) {\n      const value = -categories_12m[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(categories_12m[category]);\n      const percentual = parseFloat((value / spending_12m).toFixed(2));\n      categories_list_12m.push({ category, value, transactions, percentual });\n    }\n  }\n  if (categories_list_12m && categories_list_12m.length) {\n    categories_list_12m.sort((a, b) => b.value - a.value);\n    top_03_categories_list_12m = categories_list_12m.splice(0, 3);\n  }\n\n  if (categories_this_month) {\n    for (const category of Object.keys(categories_this_month)) {\n      const value = -categories_this_month[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(categories_this_month[category]);\n      const percentual = parseFloat((value / spending_this_month).toFixed(2));\n      categories_list_this_month.push({ category, value, transactions, percentual });\n    }\n  }\n  if (categories_list_this_month && categories_list_this_month.length) {\n    categories_list_this_month.sort((a, b) => b.value - a.value);\n    top_03_categories_list_this_month = categories_list_this_month.splice(0, 3);\n  }\n\n  if (variable_categories_this_month) {\n    for (const category of Object.keys(variable_categories_this_month)) {\n      const value = -variable_categories_this_month[category].reduce((t, c) => { return t += c.amount; }, 0).toFixed(2);\n      const transactions = _.size(variable_categories_this_month[category]);\n      const percentual = parseFloat((value / spending_this_month).toFixed(2));\n      variable_categories_list_this_month.push({ category, value, transactions, percentual });\n    }\n  }\n  if (variable_categories_list_this_month && variable_categories_list_this_month.length) {\n    variable_categories_list_this_month.sort((a, b) => b.value - a.value);\n    top_03_variable_categories_list_this_month = variable_categories_list_this_month.splice(0, 3);\n  }\n\n  let income_12m = 0;\n  let income_06m = 0;\n  let income_03m = 0;\n  let income_01m = 0;\n  let income_03m_closed = 0;\n  let income_this_month = 0;\n  let income_paycheck_this_month = 0;\n  let income_list_12m = null;\n  let income_by_month = {};\n  let month_with_more_deposits = '01'\n\n  if (income && income.length) {\n    date_last_income_transaction = moment(_.minBy(income, 'date').date).format('YYYY-MM-DD');\n    income_transactions_12m = _.size(income.filter(t => t.date.getTime() <= end_year));\n    income_list_12m = income.filter(t => t.date.getTime() <= end_year);\n    for (const i in income_list_12m) {\n      const m = moment(income_list_12m[i].date).format('MM');\n      income_by_month[m] = (income_by_month[m] || 0) + income_list_12m[i].amount;\n    }\n    for (const m of Object.keys(income_by_month)) {\n      month_with_more_deposits = (income_by_month[m] >= (income_by_month[month_with_more_deposits] || 0)) ? m : month_with_more_deposits;\n    }\n    income_12m = _.sumBy(income_list_12m, 'amount').toFixed(2);\n    income_06m = _.sumBy(income.filter(t => t.date.getTime() >= sixMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    income_03m = _.sumBy(income.filter(t => t.date.getTime() >= threeMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    income_01m = _.sumBy(income.filter(t => t.date.getTime() >= oneMonthsAgo && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    income_03m_closed = _.sumBy(income.filter(t => t.date.getTime() >= start_3mo_closed && t.date.getTime() <= end_3mo_closed), 'amount').toFixed(2);\n    income_this_month = _.sumBy(income.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment), 'amount').toFixed(2);\n    income_paycheck_this_month = _.sumBy(income.filter(t => t.date.getTime() >= start_this_month && t.date.getTime() <= this_moment && [150300].includes(t.olivia_category_id)), 'amount').toFixed(2);\n  }\n\n  let annual_savings_year = income_12m - spending_12m;\n  let annual_savings_2020 = income_12m - spending_12m;\n\n  return {\n    v: '3.3',\n    update_at: moment().format('llll'),\n    spending_06m,\n    spending_03m,\n    spending_transactions_12m,\n    spending_12m,\n    income_transactions_12m,\n    top_03_vendors_list_03m,\n    top_03_vendors_list_12m,\n    top_03_categories_list_01m,\n    top_03_categories_list_03m,\n    top_03_categories_list_12m,\n    top_03_categories_list_this_month,\n    top_03_variable_categories_list_this_month,\n    transactions_03m,\n    food_and_drink_03m,\n    groceries_03m,\n    spending_01m,\n    spending_01m_closed,\n    spending_03m_closed,\n    spending_this_month,\n    fixed_spending_01m,\n    variable_spending_01m,\n    fixed_spending_03m_closed,\n    variable_spending_03m_closed,\n    fixed_spending_06m_closed,\n    variable_spending_06m_closed,\n    fixed_spending_this_month,\n    variable_spending_this_month,\n    income_12m,\n    income_06m,\n    income_03m,\n    income_01m,\n    income_03m_closed,\n    income_this_month,\n    income_paycheck_this_month,\n    income_by_month,\n    most_expensive_transaction_01m_closed,\n    most_expensive_transaction_03m,\n    month_with_more_deposits,\n    annual_savings_year,\n    annual_savings_2020,\n    spending_transactions_credit_card_12m,\n    spending_credit_card_by_month,\n    month_with_more_credit_card_transactions,\n    max_credit_card_transactions,\n    top_03_spending_by_category_weekdays_12m,\n    top_03_spending_by_category_weekend_12m,\n    savings_unpaired_transactions_03m,\n    savings_investments_accounts_03m,\n    savings_03m,\n    date_last_spending_transaction,\n    date_last_income_transaction\n  }\n"""
act_spotify_offer,L1 Category Education 60 Days Sum Amount,undefined,rvars.agg.l1cat20000.amt60d,undefined
act_spotify_offer,L2 Category Groceries/Market & Supermarket 30 Days Sum Amount,undefined,rvars.agg.l2cat110300.amt30d,undefined
act_spotify_offer,Count Spotify Individual Plan Last 3 Months,undefined,rvars.agg.spotify.individual3m,"""const moment = require('moment');\nconst _ = require('lodash');\nconst threeMonthAgo = moment().utc().subtract(3, 'month').startOf('day');\n\ntransactions = transactions.filter(t => Array.isArray(t.transaction_property_ids) && t.transaction_property_ids.includes('spotify_individual_plan_uk'));\n\nif (!transactions || transactions.length == 0) return false;\nreturn true;"""
inf_alert_duplicated_payment,Duplicate Transactions in the last week,Find duplicate transactions from the last week,rvars.agg.duplicate_transactions.last_7d,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const start_one_week_ago = moment.utc().subtract(1, 'week').valueOf();\n    const end_current_week = moment.utc().endOf('week').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_one_week_ago\n            && m <= end_current_week\n            && transaction.cashflow === true\n            && transaction.cashflow_type === 'out'\n            && !([260000].includes(transaction.olivia_category_level1_id))\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}_${transaction.relevant_description}_${transaction.amount}_${transaction.account_type_id}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description,\n                account_type_id: transaction.account_type_id,\n                metadata: transaction.metadata\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    const duplicateEntries = _.pickBy(billsRelDesc, function (value, key) {\n        if (value.length < 2) return false;\n        return true;\n    });\n\n    return duplicateEntries;\n"""
inf_alert_unusual_expense_agua,Bills by Category and Description,Aggregate bills by category and description,rvars.agg.bills_by_category_and_description.last_6m,"""    const moment = require('moment');\n\n    const start_six_months_ago = moment.utc().subtract(6, 'months').startOf('month').valueOf();\n    const end_current_month = moment.utc().endOf('month').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_six_months_ago\n            && m <= end_current_month\n            && [10100, 10200, 10300, 10400, 10500, 10600].includes(transaction.olivia_category_id)\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}${transaction.relevant_description}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                account_id: transaction.account_id,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                month: moment(transaction.date.getTime()).month(),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    for (const relDesc in billsRelDesc) {\n        billsRelDesc[relDesc].sort((a, b) => a.timestamp - b.timestamp);\n        let last_value = 0;\n        let last_month = -1;\n        for (const i in billsRelDesc[relDesc]) {\n            const previous_month_number = (billsRelDesc[relDesc][i].month + 11) % 12;\n            if (last_month >= 0 && last_month == previous_month_number && last_value != 0) {\n                billsRelDesc[relDesc][i].variation = (billsRelDesc[relDesc][i].amount / last_value) - 1;\n            }\n            else {\n                billsRelDesc[relDesc][i].variation = 0;\n            }\n            last_value = billsRelDesc[relDesc][i].amount;\n            last_month = billsRelDesc[relDesc][i].month;\n        };\n    }\n\n    return billsRelDesc;\n"""
inf_alert_duplicated_payment_cartao,Duplicate Transactions in the last week,Find duplicate transactions from the last week,rvars.agg.duplicate_transactions.last_7d,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const start_one_week_ago = moment.utc().subtract(1, 'week').valueOf();\n    const end_current_week = moment.utc().endOf('week').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_one_week_ago\n            && m <= end_current_week\n            && transaction.cashflow === true\n            && transaction.cashflow_type === 'out'\n            && !([260000].includes(transaction.olivia_category_level1_id))\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}_${transaction.relevant_description}_${transaction.amount}_${transaction.account_type_id}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description,\n                account_type_id: transaction.account_type_id,\n                metadata: transaction.metadata\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    const duplicateEntries = _.pickBy(billsRelDesc, function (value, key) {\n        if (value.length < 2) return false;\n        return true;\n    });\n\n    return duplicateEntries;\n"""
inf_alert_unusual_expense_agua_b,Bills by Category and Description,Aggregate bills by category and description,rvars.agg.bills_by_category_and_description.last_6m,"""    const moment = require('moment');\n\n    const start_six_months_ago = moment.utc().subtract(6, 'months').startOf('month').valueOf();\n    const end_current_month = moment.utc().endOf('month').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_six_months_ago\n            && m <= end_current_month\n            && [10100, 10200, 10300, 10400, 10500, 10600].includes(transaction.olivia_category_id)\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}${transaction.relevant_description}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                account_id: transaction.account_id,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                month: moment(transaction.date.getTime()).month(),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    for (const relDesc in billsRelDesc) {\n        billsRelDesc[relDesc].sort((a, b) => a.timestamp - b.timestamp);\n        let last_value = 0;\n        let last_month = -1;\n        for (const i in billsRelDesc[relDesc]) {\n            const previous_month_number = (billsRelDesc[relDesc][i].month + 11) % 12;\n            if (last_month >= 0 && last_month == previous_month_number && last_value != 0) {\n                billsRelDesc[relDesc][i].variation = (billsRelDesc[relDesc][i].amount / last_value) - 1;\n            }\n            else {\n                billsRelDesc[relDesc][i].variation = 0;\n            }\n            last_value = billsRelDesc[relDesc][i].amount;\n            last_month = billsRelDesc[relDesc][i].month;\n        };\n    }\n\n    return billsRelDesc;\n"""
inf_alert_unusual_expense_celular_b,Bills by Category and Description,Aggregate bills by category and description,rvars.agg.bills_by_category_and_description.last_6m,"""    const moment = require('moment');\n\n    const start_six_months_ago = moment.utc().subtract(6, 'months').startOf('month').valueOf();\n    const end_current_month = moment.utc().endOf('month').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_six_months_ago\n            && m <= end_current_month\n            && [10100, 10200, 10300, 10400, 10500, 10600].includes(transaction.olivia_category_id)\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}${transaction.relevant_description}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                account_id: transaction.account_id,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                month: moment(transaction.date.getTime()).month(),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    for (const relDesc in billsRelDesc) {\n        billsRelDesc[relDesc].sort((a, b) => a.timestamp - b.timestamp);\n        let last_value = 0;\n        let last_month = -1;\n        for (const i in billsRelDesc[relDesc]) {\n            const previous_month_number = (billsRelDesc[relDesc][i].month + 11) % 12;\n            if (last_month >= 0 && last_month == previous_month_number && last_value != 0) {\n                billsRelDesc[relDesc][i].variation = (billsRelDesc[relDesc][i].amount / last_value) - 1;\n            }\n            else {\n                billsRelDesc[relDesc][i].variation = 0;\n            }\n            last_value = billsRelDesc[relDesc][i].amount;\n            last_month = billsRelDesc[relDesc][i].month;\n        };\n    }\n\n    return billsRelDesc;\n"""
inf_alert_unusual_expense_gas,Bills by Category and Description,Aggregate bills by category and description,rvars.agg.bills_by_category_and_description.last_6m,"""    const moment = require('moment');\n\n    const start_six_months_ago = moment.utc().subtract(6, 'months').startOf('month').valueOf();\n    const end_current_month = moment.utc().endOf('month').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_six_months_ago\n            && m <= end_current_month\n            && [10100, 10200, 10300, 10400, 10500, 10600].includes(transaction.olivia_category_id)\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}${transaction.relevant_description}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                account_id: transaction.account_id,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                month: moment(transaction.date.getTime()).month(),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    for (const relDesc in billsRelDesc) {\n        billsRelDesc[relDesc].sort((a, b) => a.timestamp - b.timestamp);\n        let last_value = 0;\n        let last_month = -1;\n        for (const i in billsRelDesc[relDesc]) {\n            const previous_month_number = (billsRelDesc[relDesc][i].month + 11) % 12;\n            if (last_month >= 0 && last_month == previous_month_number && last_value != 0) {\n                billsRelDesc[relDesc][i].variation = (billsRelDesc[relDesc][i].amount / last_value) - 1;\n            }\n            else {\n                billsRelDesc[relDesc][i].variation = 0;\n            }\n            last_value = billsRelDesc[relDesc][i].amount;\n            last_month = billsRelDesc[relDesc][i].month;\n        };\n    }\n\n    return billsRelDesc;\n"""
inf_alert_unusual_expense_gas_b,Bills by Category and Description,Aggregate bills by category and description,rvars.agg.bills_by_category_and_description.last_6m,"""    const moment = require('moment');\n\n    const start_six_months_ago = moment.utc().subtract(6, 'months').startOf('month').valueOf();\n    const end_current_month = moment.utc().endOf('month').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_six_months_ago\n            && m <= end_current_month\n            && [10100, 10200, 10300, 10400, 10500, 10600].includes(transaction.olivia_category_id)\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}${transaction.relevant_description}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                account_id: transaction.account_id,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                month: moment(transaction.date.getTime()).month(),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    for (const relDesc in billsRelDesc) {\n        billsRelDesc[relDesc].sort((a, b) => a.timestamp - b.timestamp);\n        let last_value = 0;\n        let last_month = -1;\n        for (const i in billsRelDesc[relDesc]) {\n            const previous_month_number = (billsRelDesc[relDesc][i].month + 11) % 12;\n            if (last_month >= 0 && last_month == previous_month_number && last_value != 0) {\n                billsRelDesc[relDesc][i].variation = (billsRelDesc[relDesc][i].amount / last_value) - 1;\n            }\n            else {\n                billsRelDesc[relDesc][i].variation = 0;\n            }\n            last_value = billsRelDesc[relDesc][i].amount;\n            last_month = billsRelDesc[relDesc][i].month;\n        };\n    }\n\n    return billsRelDesc;\n"""
inf_alert_unusual_expense_internet,Bills by Category and Description,Aggregate bills by category and description,rvars.agg.bills_by_category_and_description.last_6m,"""    const moment = require('moment');\n\n    const start_six_months_ago = moment.utc().subtract(6, 'months').startOf('month').valueOf();\n    const end_current_month = moment.utc().endOf('month').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_six_months_ago\n            && m <= end_current_month\n            && [10100, 10200, 10300, 10400, 10500, 10600].includes(transaction.olivia_category_id)\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}${transaction.relevant_description}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                account_id: transaction.account_id,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                month: moment(transaction.date.getTime()).month(),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    for (const relDesc in billsRelDesc) {\n        billsRelDesc[relDesc].sort((a, b) => a.timestamp - b.timestamp);\n        let last_value = 0;\n        let last_month = -1;\n        for (const i in billsRelDesc[relDesc]) {\n            const previous_month_number = (billsRelDesc[relDesc][i].month + 11) % 12;\n            if (last_month >= 0 && last_month == previous_month_number && last_value != 0) {\n                billsRelDesc[relDesc][i].variation = (billsRelDesc[relDesc][i].amount / last_value) - 1;\n            }\n            else {\n                billsRelDesc[relDesc][i].variation = 0;\n            }\n            last_value = billsRelDesc[relDesc][i].amount;\n            last_month = billsRelDesc[relDesc][i].month;\n        };\n    }\n\n    return billsRelDesc;\n"""
inf_alert_unusual_expense_internet_b,Bills by Category and Description,Aggregate bills by category and description,rvars.agg.bills_by_category_and_description.last_6m,"""    const moment = require('moment');\n\n    const start_six_months_ago = moment.utc().subtract(6, 'months').startOf('month').valueOf();\n    const end_current_month = moment.utc().endOf('month').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_six_months_ago\n            && m <= end_current_month\n            && [10100, 10200, 10300, 10400, 10500, 10600].includes(transaction.olivia_category_id)\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}${transaction.relevant_description}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                account_id: transaction.account_id,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                month: moment(transaction.date.getTime()).month(),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    for (const relDesc in billsRelDesc) {\n        billsRelDesc[relDesc].sort((a, b) => a.timestamp - b.timestamp);\n        let last_value = 0;\n        let last_month = -1;\n        for (const i in billsRelDesc[relDesc]) {\n            const previous_month_number = (billsRelDesc[relDesc][i].month + 11) % 12;\n            if (last_month >= 0 && last_month == previous_month_number && last_value != 0) {\n                billsRelDesc[relDesc][i].variation = (billsRelDesc[relDesc][i].amount / last_value) - 1;\n            }\n            else {\n                billsRelDesc[relDesc][i].variation = 0;\n            }\n            last_value = billsRelDesc[relDesc][i].amount;\n            last_month = billsRelDesc[relDesc][i].month;\n        };\n    }\n\n    return billsRelDesc;\n"""
inf_alert_unusual_expense_luz,Bills by Category and Description,Aggregate bills by category and description,rvars.agg.bills_by_category_and_description.last_6m,"""    const moment = require('moment');\n\n    const start_six_months_ago = moment.utc().subtract(6, 'months').startOf('month').valueOf();\n    const end_current_month = moment.utc().endOf('month').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_six_months_ago\n            && m <= end_current_month\n            && [10100, 10200, 10300, 10400, 10500, 10600].includes(transaction.olivia_category_id)\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}${transaction.relevant_description}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                account_id: transaction.account_id,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                month: moment(transaction.date.getTime()).month(),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    for (const relDesc in billsRelDesc) {\n        billsRelDesc[relDesc].sort((a, b) => a.timestamp - b.timestamp);\n        let last_value = 0;\n        let last_month = -1;\n        for (const i in billsRelDesc[relDesc]) {\n            const previous_month_number = (billsRelDesc[relDesc][i].month + 11) % 12;\n            if (last_month >= 0 && last_month == previous_month_number && last_value != 0) {\n                billsRelDesc[relDesc][i].variation = (billsRelDesc[relDesc][i].amount / last_value) - 1;\n            }\n            else {\n                billsRelDesc[relDesc][i].variation = 0;\n            }\n            last_value = billsRelDesc[relDesc][i].amount;\n            last_month = billsRelDesc[relDesc][i].month;\n        };\n    }\n\n    return billsRelDesc;\n"""
inf_alert_unusual_expense_luz_b,Bills by Category and Description,Aggregate bills by category and description,rvars.agg.bills_by_category_and_description.last_6m,"""    const moment = require('moment');\n\n    const start_six_months_ago = moment.utc().subtract(6, 'months').startOf('month').valueOf();\n    const end_current_month = moment.utc().endOf('month').valueOf();\n    const billsRelDesc = {};\n\n    for (const transaction of transactions) {\n        const m = transaction.date.getTime();\n        if (transaction.cashflow\n            && transaction.enabled\n            && !transaction.pending\n            && m >= start_six_months_ago\n            && m <= end_current_month\n            && [10100, 10200, 10300, 10400, 10500, 10600].includes(transaction.olivia_category_id)\n        ) {\n            // group bills per relevant description and category, summing previous and current month separately\n            const relDesc = `${transaction.olivia_category_id}${transaction.relevant_description}`;\n            billsRelDesc[relDesc] = billsRelDesc[relDesc] || [];\n            const transaction_data = {\n                amount: -transaction.amount,\n                account_id: transaction.account_id,\n                timestamp: transaction.date.getTime(),\n                formatted_date: moment(transaction.date.getTime()).format('DD/MM/YY'),\n                month: moment(transaction.date.getTime()).month(),\n                transaction_id: transaction.transaction_id,\n                description: transaction.description\n            };\n\n            billsRelDesc[relDesc].push(transaction_data);\n        }\n    }\n\n    for (const relDesc in billsRelDesc) {\n        billsRelDesc[relDesc].sort((a, b) => a.timestamp - b.timestamp);\n        let last_value = 0;\n        let last_month = -1;\n        for (const i in billsRelDesc[relDesc]) {\n            const previous_month_number = (billsRelDesc[relDesc][i].month + 11) % 12;\n            if (last_month >= 0 && last_month == previous_month_number && last_value != 0) {\n                billsRelDesc[relDesc][i].variation = (billsRelDesc[relDesc][i].amount / last_value) - 1;\n            }\n            else {\n                billsRelDesc[relDesc][i].variation = 0;\n            }\n            last_value = billsRelDesc[relDesc][i].amount;\n            last_month = billsRelDesc[relDesc][i].month;\n        };\n    }\n\n    return billsRelDesc;\n"""
inf_beneficio_tag_itau,L2 Category Transportation/Parking 30 Days Sum Amount,undefined,rvars.agg.l2cat130800.amt30d,undefined
inf_beneficio_tag_itau,L2 Category Transportation/Gas & Fuel 60 Days Sum Amount,undefined,rvars.agg.l2cat130500.amt60d,undefined
inf_beneficio_tag_itau,L2 Category Transportation/Toll 60 Days Sum Amount,undefined,rvars.agg.l2cat131200.amt60d,undefined
inf_beneficio_tag_itau,Conectcar Expenses 30 Days Amount,undefined,rvars.agg.conectcar.amt_30d,undefined
inf_ifood_cartao_debito,Itau iFood by Account Type,Check food delivery expenses on credit card and on checking account,rvars.agg.itau_ifood_delivery.amt_30d,"""    const moment = require('moment');\n    const buffer = moment().utc().subtract(30, 'days').startOf('day');\n\n    const period_transactions = transactions.filter(t => t.date.getTime() >= buffer\n        && t.cashflow\n        && t.enabled);\n\n\n    const food_transactions = period_transactions.filter(t => [1000013].includes(t.olivia_category_id));\n    const checking_expenses = food_transactions.filter(t => t.account_type_id == 100).reduce((acc, item) => acc - item.amount, 0);\n\n    const credit_expenses = period_transactions.filter(t => t.account_type_id == 200).reduce((acc, item) => acc - item.amount, 0);\n\n    return { checking_expenses, credit_expenses };\n"""
inf_ignore_promo_email,L1 Category Shopping 30 Days Sum Amount,undefined,rvars.agg.l1cat110000.amt30d,undefined
inf_impulse_3_day_rule,L2 Category Shopping/Clothing & Accessories 30 Days Sum Amount,undefined,rvars.agg.l2cat110500.amt30d,undefined
inf_impulse_3_day_rule_b,L1 Category Shopping 30 Days Sum Amount,undefined,rvars.agg.l1cat110000.amt30d,undefined
inf_self_comparison_higher_expenses,L1 Category Groceries 15 Days/4 months Sum Amount,L1 Category Groceries 15 Days/4 months Sum Amount,rvars.agg.l1cat115000.sum15days4months,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.olivia_category_level1_id === 115000 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_higher_expenses,L1 Category Food & Drink 15 Days/4 months Sum Amount,L1 Category Food & Drink 15 Days/4 months Sum Amount,rvars.agg.l1cat60000.sum15days4months,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.olivia_category_level1_id === 60000 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_higher_expenses,L1 Category Pets 15 Days/4 months Sum Amount,L1 Category Pets 15 Days/4 months Sum Amount,rvars.agg.l1cat1000014.sum15days4months,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.olivia_category_level1_id === 1000014 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_higher_expenses,L2 Category Healthcare/Pharmacy 15 Days/4months Sum Amount,L2 Category Healthcare/Pharmacy 15 Days/4months Sum Amount,rvars.agg.l2cat70300.sum15days4months,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.olivia_category_level2_id === 70300 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_higher_expenses,L1 Category Groceries 15 Days/4 months Sum Amount without creditcard,L1 Category Groceries 15 Days/4 months Sum Amount without creditcard,rvars.agg.l1cat115000.sum15days4monthswithoutcreditcard,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.account_type_id != 200 &&\n            t.olivia_category_level1_id === 115000 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_higher_expenses,L1 Category Food & Drink 15 Days/4 months Sum Amount without creditcard,L1 Category Food & Drink 15 Days/4 months Sum Amount without creditcard,rvars.agg.l1cat60000.sum15days4monthswithoutcreditcard,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.account_type_id != 200 &&\n            t.olivia_category_level1_id === 60000 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_higher_expenses,L1 Category Pets 15 Days/4 months Sum Amount without creditcard,L1 Category Pets 15 Days/4 months Sum Amount without creditcard,rvars.agg.l1cat1000014.sum15days4monthswithoutcreditcard,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.account_type_id != 200 &&\n            t.olivia_category_level1_id === 1000014 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_higher_expenses,L2 Category Healthcare/Pharmacy 15 Days/4months Sum Amount without creditcard,L2 Category Healthcare/Pharmacy 15 Days/4months Sum Amount without creditcard,rvars.agg.l2cat70300.sum15days4monthswithoutcreditcard,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.account_type_id != 200 &&\n            t.olivia_category_level2_id === 70300 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_lower_expenses,L1 Category Groceries 15 Days/4 months Sum Amount without creditcard,L1 Category Groceries 15 Days/4 months Sum Amount without creditcard,rvars.agg.l1cat115000.sum15days4monthswithoutcreditcard,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.account_type_id != 200 &&\n            t.olivia_category_level1_id === 115000 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_lower_expenses,L1 Category Food & Drink 15 Days/4 months Sum Amount without creditcard,L1 Category Food & Drink 15 Days/4 months Sum Amount without creditcard,rvars.agg.l1cat60000.sum15days4monthswithoutcreditcard,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.account_type_id != 200 &&\n            t.olivia_category_level1_id === 60000 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_lower_expenses,L1 Category Pets 15 Days/4 months Sum Amount without creditcard,L1 Category Pets 15 Days/4 months Sum Amount without creditcard,rvars.agg.l1cat1000014.sum15days4monthswithoutcreditcard,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.account_type_id != 200 &&\n            t.olivia_category_level1_id === 1000014 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_lower_expenses,L2 Category Healthcare/Pharmacy 15 Days/4months Sum Amount without creditcard,L2 Category Healthcare/Pharmacy 15 Days/4months Sum Amount without creditcard,rvars.agg.l2cat70300.sum15days4monthswithoutcreditcard,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.account_type_id != 200 &&\n            t.olivia_category_level2_id === 70300 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_lower_expenses,L1 Category Groceries 15 Days/4 months Sum Amount,L1 Category Groceries 15 Days/4 months Sum Amount,rvars.agg.l1cat115000.sum15days4months,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.olivia_category_level1_id === 115000 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_lower_expenses,L1 Category Food & Drink 15 Days/4 months Sum Amount,L1 Category Food & Drink 15 Days/4 months Sum Amount,rvars.agg.l1cat60000.sum15days4months,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.olivia_category_level1_id === 60000 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_lower_expenses,L1 Category Pets 15 Days/4 months Sum Amount,L1 Category Pets 15 Days/4 months Sum Amount,rvars.agg.l1cat1000014.sum15days4months,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.olivia_category_level1_id === 1000014 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_self_comparison_lower_expenses,L2 Category Healthcare/Pharmacy 15 Days/4months Sum Amount,L2 Category Healthcare/Pharmacy 15 Days/4months Sum Amount,rvars.agg.l2cat70300.sum15days4months,"""    const moment = require('moment');\n    const _ = require('lodash');\n\n    const getTransactionsSumFromPeriod = (periodsAgo) => {\n        const startDate = moment().startOf('month').subtract(periodsAgo, 'month');\n        const endDate = moment(startDate).add(14, 'day').endOf('day');\n\n        return -_.sumBy(transactions.filter(t => (\n            t.olivia_category_level2_id === 70300 &&\n            t.date >= startDate &&\n            t.date <= endDate\n        )), 'amount');\n    }\n\n    return {\n        current_month: getTransactionsSumFromPeriod(0),\n        '1_month_ago': getTransactionsSumFromPeriod(1),\n        '2_month_ago': getTransactionsSumFromPeriod(2),\n        '3_month_ago': getTransactionsSumFromPeriod(3),\n    }\n"""
inf_clothing_expenses,L1 Category Income 60 Days Sum Amount,undefined,rvars.agg.l1cat150000.amt60d,undefined
inf_clothing_expenses,L2 Category Shopping/Clothing & Accessories 90 Days Sum Amount,undefined,rvars.agg.l2cat110500.amt90d,undefined
inf_clothing_expenses,L2 Category Shopping/Clothing & Accessories 30 Days Sum Amount,undefined,rvars.agg.l2cat110500.amt30d,undefined
inf_clothing_expenses,L2 Category Shopping/Clothing & Accessories 60 Days Sum Amount,undefined,rvars.agg.l2cat110500.amt60d,undefined
inf_pharmacies_tip,L2 Category Healthcare/Pharmacy 60 Days Sum Amount,undefined,rvars.agg.l2cat70300.amt60d,undefined
inf_pharmacies_tip,L2 Category Healthcare/Pharmacy 60 Days Count,undefined,rvars.agg.l2cat70300.count60d,undefined
inf_x_ray_categories,Highest Expense Last 3 Closed Months,undefined,rvars.agg.general_transactions.highest_expense_3_closed_months,"""    const _ = require('lodash');\n    const moment = require('moment');\n\n    const start = moment().subtract(3, 'months').startOf('month').valueOf();\n    const end = moment().subtract(1, 'months').endOf('month').valueOf();\n\n    transactions = transactions.filter(t => t.date.getTime() >= start\n                                            && t.date.getTime() <= end\n                                            && (t.budget_type === 'variable' || t.budget_type === 'fixed')\n                                            && t.cashflow === true\n                                            && t.cashflow_type === 'out'\n                                            && t.amount < 0\n                                            && t.enabled);\n\n    if (transactions.length < 1) return null;\n    const t = _.minBy(transactions, 'amount');\n    return {\n        desc: t.description,\n        amt: -t.amount,\n    }\n"""
inf_itau_shop,itau_shop_last_180_days_count,undefined,rvars.agg.itau_shop.last_180_days,"""    const moment = require('moment');\n\n\n    const literal = 'shop \\| itau'\n    const itauRegex = new RegExp(`.*${literal}.*`, 'i')\n\n    const startDate = moment().startOf('month').subtract(180, 'days');\n\n    const shopTransactions = transactions.filter(t => (\n        itauRegex.test(t.relevant_description) &&\n        t.date >= startDate &&\n        t.date <= moment.now()\n    ));\n    return { count: shopTransactions.length || 0 }\n\n\n"""
inf_itau_shop,marketPlaceExpenses,marketPlaceExpenses,rvars.agg.expenses.last_60_days,"""    const moment = require('moment');\n\n    const regexLiteralsList = [\n        'shopee',\n        'aliexpress',\n        'ame dig',\n        'kabum',\n        'madeiramad',\n        'ebay',\n        'itau shop',\n        'amazon.com',\n        'amazon market',\n        'casas bahia',\n        'magalu',\n        'mercadoli',\n        'fast shop',\n        'lojas ameri',\n    ];\n\n    const generateRegexList = (literals = []) => {\n        const list = [];\n        literals.forEach((literal) => {\n            literal = literal.replace(' ', '\\\\s*');\n            list.push(new RegExp(`.*${literal}.*`, 'i'));\n        });\n\n        return list;\n    };\n\n    const regexList = generateRegexList(regexLiteralsList);\n\n    const startDate = moment().startOf('month').subtract(60, 'days');\n\n    const periodTransactions = transactions.filter(t => (\n        t.olivia_category_level1_id === 110000 &&\n        t.date >= startDate &&\n        t.date <= moment.now()\n    ));\n    let marketPlaceExpenses = 0;\n    periodTransactions.forEach((t) => {\n        regexList.some((rx) => rx.test(t.description.toLowerCase())) ? ++marketPlaceExpenses : null;\n    });\n\n    return marketPlaceExpenses\n\n"""
inf_itau_shop,Credit Card Expenses,undefined,rvars.agg.credit_card.totals,"""    const moment = require('moment');\n    const last_30d = moment().subtract(30, 'days').startOf('day').valueOf();\n    const last_90d = moment().subtract(90, 'days').startOf('day').valueOf();\n    const last_120d = moment().subtract(120, 'days').startOf('day').valueOf();\n    const last_180d = moment().subtract(180, 'days').startOf('day').valueOf();\n    const credit_card_transactions = transactions.filter(t => t.enabled && t.account_type_id == 200);\n\n    const credit_card_expenses = credit_card_transactions.filter(t =>\n        (t.budget_type === 'variable' || t.budget_type === 'fixed')\n        && t.cashflow === true\n        && t.cashflow_type === 'out');\n\n    const spending_30d = credit_card_expenses.filter(t => t.date.getTime() >= last_30d).reduce((acc, item) => acc - item.amount, 0);\n    const spending_90d = credit_card_expenses.filter(t => t.date.getTime() >= last_90d).reduce((acc, item) => acc - item.amount, 0);\n    const spending_120d = credit_card_expenses.filter(t => t.date.getTime() >= last_120d).reduce((acc, item) => acc - item.amount, 0);\n    const spending_180d = credit_card_expenses.filter(t => t.date.getTime() >= last_180d).reduce((acc, item) => acc - item.amount, 0);\n    return { spending_30d, spending_90d, spending_120d, spending_180d };\n"""